/**
 * üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –¥–æ—Ä–æ–≥
 * –°—Ç—Ä–æ–∏—Ç –º–∞—Ä—à—Ä—É—Ç—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–æ—Ä–æ–≥ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
 */

class IntelligentRouter {
  constructor(priorityService) {
    this.priorityService = priorityService
    this.cache = new Map()
    this.maxCacheSize = 100
  }

  /**
   * üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
   */
  async buildOptimizedRoute(fromCoords, toCoords, options = {}) {
    const {
      transportMode = 'walking',
      avoidHighTraffic = true,
      preferSafeRoutes = true,
      preferParks = false,
      maxAlternatives = 3,
      waypoints = [] // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
    } = options

    console.log('üß† –°—Ç—Ä–æ–∏–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π...')

    if (waypoints.length > 0) {
      console.log(`üìç –ú–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ ${waypoints.length} –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫`)
    }

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
      const alternatives = await this.generateRouteAlternatives(
        fromCoords,
        toCoords,
        transportMode,
        maxAlternatives,
        waypoints
      )

      if (alternatives.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞')
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ä—à—Ä—É—Ç
      const analyzedRoutes = []
      for (const route of alternatives) {
        try {
          const analysis = await this.priorityService.prioritizeRoute(route, {
            transportMode,
            currentTime: new Date(),
            weather: 'clear'
          })

          analyzedRoutes.push({
            route,
            analysis,
            score: this.calculateRouteScore(analysis, options)
          })
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞:', error.message)
        }
      }

      if (analyzedRoutes.length === 0) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
        return alternatives[0]
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Ç–æ–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É
      analyzedRoutes.sort((a, b) => b.score - a.score)

      const bestRoute = analyzedRoutes[0]
      console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –º–∞—Ä—à—Ä—É—Ç —Å –æ—Ü–µ–Ω–∫–æ–π ${bestRoute.score.toFixed(2)}`)

      return {
        ...bestRoute.route,
        priorityAnalysis: bestRoute.analysis,
        alternativeRoutes: analyzedRoutes.slice(1).map(r => ({
          route: r.route,
          analysis: r.analysis,
          score: r.score
        }))
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞:', error)
      throw error
    }
  }

  /**
   * üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
   */
  async generateRouteAlternatives(fromCoords, toCoords, transportMode, maxAlternatives, waypoints = []) {
    const alternatives = []
    const profile = this.getOSRMProfile(transportMode)

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏, —Å—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –Ω–∏—Ö
    if (waypoints.length > 0) {
      try {
        const waypointRoute = await this.buildRouteWithWaypoints(
          [fromCoords, ...waypoints.map(wp => wp.coordinates), toCoords],
          profile
        )
        waypointRoute.type = 'waypoint'
        waypointRoute.waypointCount = waypoints.length
        alternatives.push(waypointRoute)

        console.log(`‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ ${waypoints.length} –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫`)
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏:', error.message)
      }
    }

    // 1. –ü—Ä—è–º–æ–π –º–∞—Ä—à—Ä—É—Ç (–µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏–ª–∏ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
    if (waypoints.length === 0) {
      try {
        const directRoute = await this.buildDirectRoute(fromCoords, toCoords, profile)
        alternatives.push(directRoute)
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä—è–º–æ–π –º–∞—Ä—à—Ä—É—Ç:', error.message)
      }
    }

    // 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫)
    if (waypoints.length === 0) {
      // –ë–æ–ª–µ–µ —Ä–∞–∑—É–º–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–º–µ–Ω—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è)
      const waypointStrategies = [
        { name: 'north_detour', offset: [0.002, 0] },      // –°–µ–≤–µ—Ä–Ω—ã–π –æ–±—ä–µ–∑–¥ (200–º)
        { name: 'south_detour', offset: [-0.002, 0] },     // –Æ–∂–Ω—ã–π –æ–±—ä–µ–∑–¥ (200–º)
        { name: 'east_detour', offset: [0, 0.002] },       // –í–æ—Å—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–∑–¥ (200–º)
        { name: 'west_detour', offset: [0, -0.002] },      // –ó–∞–ø–∞–¥–Ω—ã–π –æ–±—ä–µ–∑–¥ (200–º)
        { name: 'diagonal_ne', offset: [0.001, 0.001] },   // –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π (100–º)
        { name: 'diagonal_sw', offset: [-0.001, -0.001] }  // –Æ–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π (100–º)
      ]

      for (let i = 0; i < Math.min(maxAlternatives - 1, waypointStrategies.length); i++) {
        try {
          const strategy = waypointStrategies[i]
          const waypoint = [
            fromCoords[0] + (toCoords[0] - fromCoords[0]) * 0.5 + strategy.offset[0],
            fromCoords[1] + (toCoords[1] - fromCoords[1]) * 0.5 + strategy.offset[1]
          ]

          const alternativeRoute = await this.buildRouteWithWaypoints(
            [fromCoords, waypoint, toCoords],
            profile
          )

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä—è–º–æ–≥–æ
          if (alternatives.length > 0) {
            const distanceDiff = Math.abs(alternativeRoute.distance - alternatives[0].distance)
            if (distanceDiff > alternatives[0].distance * 0.1) { // –û—Ç–ª–∏—á–∏–µ –±–æ–ª—å—à–µ 10%
              alternatives.push(alternativeRoute)
            }
          } else {
            alternatives.push(alternativeRoute)
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ${waypointStrategies[i].name}:`, error.message)
        }
      }
    } else {
      // –î–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —Ç–æ—á–µ–∫
      if (waypoints.length > 1) {
        try {
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å –æ–±—Ä–∞—Ç–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
          const reversedWaypoints = [...waypoints].reverse()
          const reversedRoute = await this.buildRouteWithWaypoints(
            [fromCoords, ...reversedWaypoints.map(wp => wp.coordinates), toCoords],
            profile
          )
          reversedRoute.type = 'waypoint_reversed'
          reversedRoute.waypointCount = waypoints.length
          alternatives.push(reversedRoute)

          console.log('‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å –æ–±—Ä–∞—Ç–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —Ç–æ—á–µ–∫')
        } catch (error) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç —Å –æ–±—Ä–∞—Ç–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º —Ç–æ—á–µ–∫:', error.message)
        }
      }
    }

    console.log(`üìç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${alternatives.length} –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤`)
    return alternatives
  }

  /**
   * üìä –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  calculateRouteScore(analysis, options) {
    const { avoidHighTraffic, preferSafeRoutes, preferParks } = options

    let score = analysis.routePriority * 100 // –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-100)

    // –ë–æ–Ω—É—Å—ã –∏ —à—Ç—Ä–∞—Ñ—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    if (preferSafeRoutes) {
      const avgSafety = analysis.prioritizedSegments.reduce(
        (sum, seg) => sum + seg.safetyScore, 0
      ) / analysis.prioritizedSegments.length
      score += avgSafety * 20 // –ë–æ–Ω—É—Å –¥–æ +20 –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    }

    if (avoidHighTraffic) {
      const avgTraffic = analysis.prioritizedSegments.reduce(
        (sum, seg) => sum + seg.trafficLevel, 0
      ) / analysis.prioritizedSegments.length
      score -= avgTraffic * 30 // –®—Ç—Ä–∞—Ñ –¥–æ -30 –∑–∞ –≤—ã—Å–æ–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫
    }

    if (preferParks) {
      const avgEcology = analysis.prioritizedSegments.reduce(
        (sum, seg) => sum + seg.scores.ecology, 0
      ) / analysis.prioritizedSegments.length
      score += avgEcology * 25 // –ë–æ–Ω—É—Å –¥–æ +25 –∑–∞ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å
    }

    // –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∏–∑–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    const lowQualitySegments = analysis.prioritizedSegments.filter(seg => seg.priority < 0.3)
    score -= lowQualitySegments.length * 5

    // –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    const highQualitySegments = analysis.prioritizedSegments.filter(seg => seg.priority > 0.8)
    score += highQualitySegments.length * 3

    return Math.max(0, score)
  }

  /**
   * üõ£Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  async buildDirectRoute(fromCoords, toCoords, profile) {
    const cacheKey = `${fromCoords.join(',')}-${toCoords.join(',')}-${profile}`

    if (this.cache.has(cacheKey)) {
      console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç')
      return this.cache.get(cacheKey)
    }

    const response = await fetch(
      `https://router.project-osrm.org/route/v1/${profile}/${fromCoords[1]},${fromCoords[0]};${toCoords[1]},${toCoords[0]}?overview=full&geometries=geojson&steps=true&alternatives=false`
    )

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤')
    }

    const data = await response.json()
    if (!data.routes || data.routes.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç')
    }

    const route = {
      coordinates: data.routes[0].geometry.coordinates.map(coord => [coord[1], coord[0]]),
      distance: data.routes[0].distance,
      duration: data.routes[0].duration,
      from: fromCoords,
      to: toCoords,
      type: 'direct'
    }

    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.addToCache(cacheKey, route)

    return route
  }

  /**
   * üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
   */
  async buildRouteWithWaypoints(points, profile) {
    const coordinates = points.map(p => `${p[1]},${p[0]}`).join(';')

    const response = await fetch(
      `https://router.project-osrm.org/route/v1/${profile}/${coordinates}?overview=full&geometries=geojson&steps=true`
    )

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤')
    }

    const data = await response.json()
    if (!data.routes || data.routes.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏')
    }

    return {
      coordinates: data.routes[0].geometry.coordinates.map(coord => [coord[1], coord[0]]),
      distance: data.routes[0].distance,
      duration: data.routes[0].duration,
      from: points[0],
      to: points[points.length - 1],
      waypoints: points.slice(1, -1),
      type: 'waypoint'
    }
  }

  /**
   * üöó –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è OSRM
   */
  getOSRMProfile(transportMode) {
    switch (transportMode) {
      case 'walking': return 'foot'
      case 'cycling': return 'bicycle'
      case 'driving':
      case 'taxi':
      case 'public_transport':
      default: return 'driving'
    }
  }

  /**
   * üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–º
   */
  addToCache(key, value) {
    if (this.cache.size >= this.maxCacheSize) {
      // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const firstKey = this.cache.keys().next().value
      this.cache.delete(firstKey)
    }
    this.cache.set(key, value)
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
   */
  clearCache() {
    this.cache.clear()
    console.log('üßπ –ö–µ—à –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—á–∏—â–µ–Ω')
  }
}

export default IntelligentRouter
