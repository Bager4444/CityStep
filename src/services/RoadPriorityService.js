/**
 * üõ£Ô∏è –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ—Ä–æ–≥
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */

class RoadPriorityService {
  constructor() {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.defaultConfig = {
      // –¢–∏–ø—ã –¥–æ—Ä–æ–≥ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫ –Ω–∏–∑–∫–æ–º—É)
      roadTypes: {
        pedestrian: { priority: 1.0, speed: 5, safety: 0.95, comfort: 0.9 },    // –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –∑–æ–Ω—ã
        footway: { priority: 0.95, speed: 5, safety: 0.9, comfort: 0.85 },      // –¢—Ä–æ—Ç—É–∞—Ä—ã
        path: { priority: 0.9, speed: 4, safety: 0.85, comfort: 0.8 },          // –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ —Ç—Ä–æ–ø—ã
        cycleway: { priority: 0.7, speed: 4, safety: 0.8, comfort: 0.7 },       // –í–µ–ª–æ–¥–æ—Ä–æ–∂–∫–∏ (–º–æ–∂–Ω–æ –∏–¥—Ç–∏)
        residential: { priority: 0.6, speed: 4, safety: 0.75, comfort: 0.6 },   // –ñ–∏–ª—ã–µ —É–ª–∏—Ü—ã
        service: { priority: 0.5, speed: 3, safety: 0.7, comfort: 0.5 },        // –°–ª—É–∂–µ–±–Ω—ã–µ –¥–æ—Ä–æ–≥–∏
        tertiary: { priority: 0.4, speed: 3, safety: 0.6, comfort: 0.4 },       // –¢—Ä–µ—Ç—å–µ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏
        secondary: { priority: 0.3, speed: 3, safety: 0.5, comfort: 0.3 },      // –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏
        primary: { priority: 0.2, speed: 3, safety: 0.4, comfort: 0.2 },        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Ä–æ–≥–∏
        trunk: { priority: 0.1, speed: 3, safety: 0.3, comfort: 0.1 },          // –ú–∞–≥–∏—Å—Ç—Ä–∞–ª–∏ (–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)
        motorway: { priority: 0.05, speed: 3, safety: 0.2, comfort: 0.05 }      // –ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª–∏ (–∑–∞–ø—Ä–µ—â–µ–Ω–æ)
      },

      // –§–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤ (–¥—Ä—É–≥–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã)
      factors: {
        safety: 0.35,      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
        comfort: 0.25,     // –ö–æ–º—Ñ–æ—Ä—Ç (—Ç—Ä–æ—Ç—É–∞—Ä—ã, –ø–æ–∫—Ä—ã—Ç–∏–µ, —Ç–µ–Ω—å)
        ecology: 0.2,      // –≠–∫–æ–ª–æ–≥–∏—è (–ø–∞—Ä–∫–∏, –∑–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã)
        traffic: 0.15,     // –ò–∑–±–µ–≥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
        speed: 0.05        // –°–∫–æ—Ä–æ—Å—Ç—å –º–µ–Ω–µ–µ –≤–∞–∂–Ω–∞ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
      },

      timeOfDay: {
        morning: { trafficMultiplier: 1.3, safetyMultiplier: 0.9 },
        day: { trafficMultiplier: 1.0, safetyMultiplier: 1.0 },
        evening: { trafficMultiplier: 1.4, safetyMultiplier: 0.8 },
        night: { trafficMultiplier: 0.7, safetyMultiplier: 0.6 }
      },

      weather: {
        clear: { speedMultiplier: 1.0, safetyMultiplier: 1.0 },
        rain: { speedMultiplier: 0.8, safetyMultiplier: 0.7 },
        snow: { speedMultiplier: 0.6, safetyMultiplier: 0.5 },
        fog: { speedMultiplier: 0.7, safetyMultiplier: 0.6 }
      }
    }

    this.userConfig = { ...this.defaultConfig }
    this.trafficData = new Map()
    this.roadQualityData = new Map()
  }

  /**
   * üéØ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  async prioritizeRoute(routeData, options = {}) {
    try {
      console.log('üõ£Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é –º–∞—Ä—à—Ä—É—Ç–∞...')

      const {
        transportMode = 'driving',
        userPreferences = {},
        currentTime = new Date(),
        weather = 'clear'
      } = options

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –º–∞—Ä—à—Ä—É—Ç–∞
      const segments = await this.analyzeRouteSegments(routeData)

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
      const prioritizedSegments = segments.map(segment =>
        this.calculateSegmentPriority(segment, {
          transportMode,
          userPreferences,
          currentTime,
          weather
        })
      )

      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞
      const routePriority = this.calculateRoutePriority(prioritizedSegments)

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
      const alternatives = await this.generateAlternativeRoutes(
        routeData,
        prioritizedSegments,
        options
      )

      console.log(`‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${routePriority.toFixed(2)}`)

      return {
        originalRoute: routeData,
        prioritizedSegments,
        routePriority,
        alternatives,
        recommendations: this.generateRecommendations(prioritizedSegments),
        metadata: {
          analysisTime: new Date(),
          factorsUsed: Object.keys(this.userConfig.factors),
          transportMode,
          weather
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏: ${error.message}`)
    }
  }

  /**
   * üîç –ê–Ω–∞–ª–∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  async analyzeRouteSegments(routeData) {
    const segments = []

    if (!routeData.coordinates || routeData.coordinates.length < 2) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä—à—Ä—É—Ç–∞')
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
    for (let i = 0; i < routeData.coordinates.length - 1; i++) {
      const start = routeData.coordinates[i]
      const end = routeData.coordinates[i + 1]

      const segment = {
        id: `segment_${i}`,
        start: { lat: start[0], lon: start[1] },
        end: { lat: end[0], lon: end[1] },
        distance: this.calculateDistance(start, end),
        roadType: await this.identifyRoadType(start, end),
        trafficLevel: await this.getTrafficLevel(start, end),
        roadQuality: await this.getRoadQuality(start, end),
        safetyScore: await this.getSafetyScore(start, end)
      }

      segments.push(segment)
    }

    return segments
  }

  /**
   * üìä –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–µ–≥–º–µ–Ω—Ç–∞
   */
  calculateSegmentPriority(segment, options) {
    const { transportMode, userPreferences, currentTime, weather } = options

    // –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ—Ä–æ–≥–∏
    const roadConfig = this.userConfig.roadTypes[segment.roadType] ||
                      this.userConfig.roadTypes.secondary

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    const timeModifiers = this.getTimeModifiers(currentTime)
    const weatherModifiers = this.userConfig.weather[weather]

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const speedScore = roadConfig.speed * weatherModifiers.speedMultiplier
    const safetyScore = segment.safetyScore * timeModifiers.safetyMultiplier *
                       weatherModifiers.safetyMultiplier
    const trafficScore = (1 - segment.trafficLevel) * timeModifiers.trafficMultiplier
    const ecologyScore = this.calculateEcologyScore(segment, transportMode)
    const comfortScore = this.calculateComfortScore(segment, roadConfig)

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    const factors = this.userConfig.factors
    const totalPriority =
      speedScore * factors.speed +
      safetyScore * factors.safety +
      trafficScore * factors.traffic +
      ecologyScore * factors.ecology +
      comfortScore * factors.comfort

    return {
      ...segment,
      priority: Math.max(0, Math.min(1, totalPriority)),
      scores: {
        speed: speedScore,
        safety: safetyScore,
        traffic: trafficScore,
        ecology: ecologyScore,
        comfort: comfortScore
      },
      modifiers: {
        time: timeModifiers,
        weather: weatherModifiers
      }
    }
  }

  /**
   * üïê –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
   */
  getTimeModifiers(currentTime) {
    const hour = currentTime.getHours()

    if (hour >= 7 && hour <= 10) return this.userConfig.timeOfDay.morning
    if (hour >= 17 && hour <= 20) return this.userConfig.timeOfDay.evening
    if (hour >= 22 || hour <= 6) return this.userConfig.timeOfDay.night
    return this.userConfig.timeOfDay.day
  }

  /**
   * üå± –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
   */
  calculateEcologyScore(segment, transportMode = 'walking') {
    // –î–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤ —ç–∫–æ–ª–æ–≥–∏—è –æ–∑–Ω–∞—á–∞–µ—Ç –±–ª–∏–∑–æ—Å—Ç—å –∫ –∑–µ–ª–µ–Ω—ã–º –∑–æ–Ω–∞–º –∏ –æ—Ç–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è
    const roadEcologyScore = {
      pedestrian: 1.0,    // –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –∑–æ–Ω—ã - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–ª–æ–≥–∏—è
      footway: 0.95,      // –¢—Ä–æ—Ç—É–∞—Ä—ã - —Ö–æ—Ä–æ—à–∞—è —ç–∫–æ–ª–æ–≥–∏—è
      path: 1.0,          // –¢—Ä–æ–ø—ã –≤ –ø–∞—Ä–∫–∞—Ö - –æ—Ç–ª–∏—á–Ω–∞—è —ç–∫–æ–ª–æ–≥–∏—è
      cycleway: 0.9,      // –í–µ–ª–æ–¥–æ—Ä–æ–∂–∫–∏ - —Ö–æ—Ä–æ—à–∞—è —ç–∫–æ–ª–æ–≥–∏—è
      residential: 0.8,   // –ñ–∏–ª—ã–µ —É–ª–∏—Ü—ã - —É–º–µ—Ä–µ–Ω–Ω–∞—è —ç–∫–æ–ª–æ–≥–∏—è
      service: 0.7,       // –°–ª—É–∂–µ–±–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ - –ø–æ–Ω–∏–∂–µ–Ω–Ω–∞—è —ç–∫–æ–ª–æ–≥–∏—è
      tertiary: 0.6,      // –¢—Ä–µ—Ç—å–µ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ - –Ω–∏–∑–∫–∞—è —ç–∫–æ–ª–æ–≥–∏—è
      secondary: 0.4,     // –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ - –ø–ª–æ—Ö–∞—è —ç–∫–æ–ª–æ–≥–∏—è
      primary: 0.3,       // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ - –æ—á–µ–Ω—å –ø–ª–æ—Ö–∞—è —ç–∫–æ–ª–æ–≥–∏—è
      trunk: 0.2,         // –ú–∞–≥–∏—Å—Ç—Ä–∞–ª–∏ - —É–∂–∞—Å–Ω–∞—è —ç–∫–æ–ª–æ–≥–∏—è
      motorway: 0.1       // –ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª–∏ - –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∞—è —ç–∫–æ–ª–æ–≥–∏—è
    }[segment.roadType] || 0.5

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
    let ecologyBonus = 1.0

    // –ë–æ–Ω—É—Å –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
    if (['pedestrian', 'footway', 'path'].includes(segment.roadType)) {
      ecologyBonus += 0.2
    }

    // –®—Ç—Ä–∞—Ñ –∑–∞ –≤—ã—Å–æ–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫ (–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞ –∏ —à—É–º)
    const trafficPenalty = 1 - (segment.trafficLevel * 0.3)

    return Math.min(1.0, roadEcologyScore * ecologyBonus * trafficPenalty)
  }

  /**
   * üòå –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
   */
  calculateComfortScore(segment, roadConfig) {
    // –ë–∞–∑–æ–≤—ã–π –∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
    let comfort = roadConfig.comfort || roadConfig.priority

    // –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∫—Ä—ã—Ç–∏—è –≤–∞–∂–Ω–æ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
    comfort *= segment.roadQuality

    // –ü–µ—à–µ—Ö–æ–¥–∞–º –≤–∞–∂–Ω–æ –∏–∑–±–µ–≥–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
    const trafficComfort = 1 - (segment.trafficLevel * 0.5) // –±–æ–ª—å—à–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ —Ç—Ä–∞—Ñ–∏–∫
    comfort *= trafficComfort

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
    const comfortBonuses = {
      pedestrian: 1.2,    // –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –∑–æ–Ω—ã - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç
      footway: 1.1,       // –¢—Ä–æ—Ç—É–∞—Ä—ã - —Ö–æ—Ä–æ—à–∏–π –∫–æ–º—Ñ–æ—Ä—Ç
      path: 1.15,         // –¢—Ä–æ–ø—ã - –æ—Ç–ª–∏—á–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç
      cycleway: 1.0,      // –í–µ–ª–æ–¥–æ—Ä–æ–∂–∫–∏ - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç
      residential: 0.9,   // –ñ–∏–ª—ã–µ —É–ª–∏—Ü—ã - –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç
      service: 0.8,       // –°–ª—É–∂–µ–±–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ - –Ω–∏–∑–∫–∏–π –∫–æ–º—Ñ–æ—Ä—Ç
      tertiary: 0.7,      // –¢—Ä–µ—Ç—å–µ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ - –ø–ª–æ—Ö–æ–π –∫–æ–º—Ñ–æ—Ä—Ç
      secondary: 0.6,     // –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–π –∫–æ–º—Ñ–æ—Ä—Ç
      primary: 0.5,       // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Ä–æ–≥–∏ - —É–∂–∞—Å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç
      trunk: 0.3,         // –ú–∞–≥–∏—Å—Ç—Ä–∞–ª–∏ - –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–º—Ñ–æ—Ä—Ç
      motorway: 0.1       // –ê–≤—Ç–æ–º–∞–≥–∏—Å—Ç—Ä–∞–ª–∏ - –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–º—Ñ–æ—Ä—Ç
    }

    const comfortMultiplier = comfortBonuses[segment.roadType] || 0.8
    comfort *= comfortMultiplier

    return Math.max(0, Math.min(1, comfort))
  }

  /**
   * üìè –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
   */
  calculateDistance(point1, point2) {
    const R = 6371000 // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    const lat1Rad = point1[0] * Math.PI / 180
    const lat2Rad = point2[0] * Math.PI / 180
    const deltaLatRad = (point2[0] - point1[0]) * Math.PI / 180
    const deltaLonRad = (point2[1] - point1[1]) * Math.PI / 180

    const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +
              Math.cos(lat1Rad) * Math.cos(lat2Rad) *
              Math.sin(deltaLonRad / 2) * Math.sin(deltaLonRad / 2)

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))
    return R * c
  }

  /**
   * üõ£Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Ä–æ–≥–∏ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
   */
  async identifyRoadType(start, end) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OSM Overpass API
    // –∏–ª–∏ –¥—Ä—É–≥–æ–º—É —Å–µ—Ä–≤–∏—Å—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–æ—Ä–æ–≥–∏
    const roadTypes = ['motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'residential']
    return roadTypes[Math.floor(Math.random() * roadTypes.length)]
  }

  /**
   * üö¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ç—Ä–∞—Ñ–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
   */
  async getTrafficLevel(start, end) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
    return Math.random() * 0.8 // 0-0.8 —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏
  }

  /**
   * üõ§Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ—Ä–æ–≥–∏ (–∑–∞–≥–ª—É—à–∫–∞)
   */
  async getRoadQuality(start, end) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ—Ä–æ–≥
    return 0.7 + Math.random() * 0.3 // 0.7-1.0 –∫–∞—á–µ—Å—Ç–≤–æ
  }

  /**
   * üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)
   */
  async getSafetyScore(start, end) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –î–¢–ü
    return 0.6 + Math.random() * 0.4 // 0.6-1.0 –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
  }

  /**
   * üéØ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  calculateRoutePriority(prioritizedSegments) {
    if (!prioritizedSegments.length) return 0

    const totalDistance = prioritizedSegments.reduce((sum, seg) => sum + seg.distance, 0)
    const weightedPriority = prioritizedSegments.reduce((sum, seg) => {
      const weight = seg.distance / totalDistance
      return sum + (seg.priority * weight)
    }, 0)

    return weightedPriority
  }

  /**
   * üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
   */
  async generateAlternativeRoutes(originalRoute, prioritizedSegments, options) {
    const alternatives = []

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 1: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    alternatives.push({
      type: 'safest',
      name: 'üõ°Ô∏è –°–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π',
      description: '–ú–∞—Ä—à—Ä—É—Ç –ø–æ —Ç—Ä–æ—Ç—É–∞—Ä–∞–º –∏ –ø–µ—à–µ—Ö–æ–¥–Ω—ã–º –∑–æ–Ω–∞–º',
      config: { safety: 0.5, comfort: 0.25, ecology: 0.15, traffic: 0.05, speed: 0.05 }
    })

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 2: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç
    alternatives.push({
      type: 'comfort',
      name: 'üòå –°–∞–º—ã–π –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π',
      description: '–ú–∞—Ä—à—Ä—É—Ç –ø–æ —É–¥–æ–±–Ω—ã–º –ø–µ—à–µ—Ö–æ–¥–Ω—ã–º –¥–æ—Ä–æ–∂–∫–∞–º',
      config: { comfort: 0.45, safety: 0.3, ecology: 0.15, traffic: 0.05, speed: 0.05 }
    })

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 3: –ß–µ—Ä–µ–∑ –ø–∞—Ä–∫–∏ –∏ –∑–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã
    alternatives.push({
      type: 'eco',
      name: 'üå± –ß–µ—Ä–µ–∑ –ø–∞—Ä–∫–∏',
      description: '–ú–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –ø–∞—Ä–∫–∏ –∏ –∑–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã',
      config: { ecology: 0.4, comfort: 0.3, safety: 0.25, traffic: 0.03, speed: 0.02 }
    })

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 4: –ò–∑–±–µ–≥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
    alternatives.push({
      type: 'quiet',
      name: 'üîá –¢–∏—Ö–∏–π –º–∞—Ä—à—Ä—É—Ç',
      description: '–ú–∞—Ä—à—Ä—É—Ç –≤–¥–∞–ª–∏ –æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –¥–æ—Ä–æ–≥',
      config: { traffic: 0.4, safety: 0.3, comfort: 0.2, ecology: 0.08, speed: 0.02 }
    })

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 5: –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å
    alternatives.push({
      type: 'shortest',
      name: 'üìè –ö—Ä–∞—Ç—á–∞–π—à–∏–π',
      description: '–°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º)',
      config: { speed: 0.3, safety: 0.25, comfort: 0.2, ecology: 0.15, traffic: 0.1 }
    })

    return alternatives
  }

  /**
   * üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  generateRecommendations(prioritizedSegments) {
    const recommendations = []

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏
    const lowPrioritySegments = prioritizedSegments.filter(seg => seg.priority < 0.4)
    const highTrafficSegments = prioritizedSegments.filter(seg => seg.trafficLevel > 0.7)
    const lowSafetySegments = prioritizedSegments.filter(seg => seg.safetyScore < 0.6)

    if (lowPrioritySegments.length > 0) {
      recommendations.push({
        type: 'warning',
        icon: '‚ö†Ô∏è',
        title: '–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏',
        message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${lowPrioritySegments.length} —É—á–∞—Å—Ç–∫–æ–≤ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã.`
      })
    }

    if (highTrafficSegments.length > 0) {
      recommendations.push({
        type: 'traffic',
        icon: 'üö¶',
        title: '–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å',
        message: `${highTrafficSegments.length} —É—á–∞—Å—Ç–∫–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å—é. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–µ—Ö–∞—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –º–∞—Ä—à—Ä—É—Ç.`
      })
    }

    if (lowSafetySegments.length > 0) {
      recommendations.push({
        type: 'safety',
        icon: 'üõ°Ô∏è',
        title: '–í–æ–ø—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
        message: `${lowSafetySegments.length} —É—á–∞—Å—Ç–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏. –°–æ–±–ª—é–¥–∞–π—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–µ–∂–∏–º.`
      })
    }

    // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const avgPriority = prioritizedSegments.reduce((sum, seg) => sum + seg.priority, 0) / prioritizedSegments.length

    if (avgPriority > 0.8) {
      recommendations.push({
        type: 'success',
        icon: '‚úÖ',
        title: '–û—Ç–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç',
        message: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º!'
      })
    }

    return recommendations
  }

  /**
   * ‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  updateUserConfig(newConfig) {
    this.userConfig = {
      ...this.userConfig,
      ...newConfig
    }

    console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', this.userConfig)
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏
   */
  getStatistics(prioritizedSegments) {
    if (!prioritizedSegments.length) return null

    const stats = {
      totalSegments: prioritizedSegments.length,
      averagePriority: prioritizedSegments.reduce((sum, seg) => sum + seg.priority, 0) / prioritizedSegments.length,
      highPrioritySegments: prioritizedSegments.filter(seg => seg.priority > 0.7).length,
      lowPrioritySegments: prioritizedSegments.filter(seg => seg.priority < 0.4).length,
      averageScores: {
        speed: prioritizedSegments.reduce((sum, seg) => sum + seg.scores.speed, 0) / prioritizedSegments.length,
        safety: prioritizedSegments.reduce((sum, seg) => sum + seg.scores.safety, 0) / prioritizedSegments.length,
        traffic: prioritizedSegments.reduce((sum, seg) => sum + seg.scores.traffic, 0) / prioritizedSegments.length,
        ecology: prioritizedSegments.reduce((sum, seg) => sum + seg.scores.ecology, 0) / prioritizedSegments.length,
        comfort: prioritizedSegments.reduce((sum, seg) => sum + seg.scores.comfort, 0) / prioritizedSegments.length
      }
    }

    return stats
  }

  /**
   * üîÑ –°–±—Ä–æ—Å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  resetToDefaults() {
    this.userConfig = { ...this.defaultConfig }
    console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
  }
}

export default RoadPriorityService
