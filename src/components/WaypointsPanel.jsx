import { useState } from 'react'
import './WaypointsPanel.css'

/**
 * üìç –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
 */
const WaypointsPanel = ({ 
  waypoints, 
  onWaypointsChange, 
  onAddWaypoint,
  onRemoveWaypoint,
  onReorderWaypoints,
  isVisible,
  onClose 
}) => {
  const [newWaypointQuery, setNewWaypointQuery] = useState('')
  const [isSearching, setIsSearching] = useState(false)
  const [searchResults, setSearchResults] = useState([])
  const [draggedIndex, setDraggedIndex] = useState(null)

  // –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏
  const handleSearchWaypoint = async () => {
    if (!newWaypointQuery.trim()) return

    setIsSearching(true)
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(newWaypointQuery + ', –ú–æ—Å–∫–≤–∞')}&limit=5&addressdetails=1`
      )
      
      if (response.ok) {
        const results = await response.json()
        setSearchResults(results.map(result => ({
          id: result.place_id,
          name: result.display_name,
          lat: parseFloat(result.lat),
          lon: parseFloat(result.lon)
        })))
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏:', error)
    } finally {
      setIsSearching(false)
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏
  const handleAddWaypoint = (location) => {
    const waypoint = {
      id: Date.now(),
      name: location.name,
      coordinates: [location.lat, location.lon],
      order: waypoints.length
    }
    
    onAddWaypoint(waypoint)
    setNewWaypointQuery('')
    setSearchResults([])
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏
  const handleRemoveWaypoint = (waypointId) => {
    onRemoveWaypoint(waypointId)
  }

  // –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragStart = (e, index) => {
    setDraggedIndex(index)
    e.dataTransfer.effectAllowed = 'move'
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDragOver = (e) => {
    e.preventDefault()
    e.dataTransfer.dropEffect = 'move'
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const handleDrop = (e, dropIndex) => {
    e.preventDefault()
    
    if (draggedIndex === null || draggedIndex === dropIndex) return

    const newWaypoints = [...waypoints]
    const draggedWaypoint = newWaypoints[draggedIndex]
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏
    newWaypoints.splice(draggedIndex, 1)
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    newWaypoints.splice(dropIndex, 0, draggedWaypoint)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    const reorderedWaypoints = newWaypoints.map((wp, index) => ({
      ...wp,
      order: index
    }))
    
    onReorderWaypoints(reorderedWaypoints)
    setDraggedIndex(null)
  }

  if (!isVisible) {
    return null
  }

  return (
    <div className="waypoints-overlay">
      <div className="waypoints-panel">
        <div className="waypoints-header">
          <h2>üìç –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏</h2>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>

        <div className="waypoints-content">
          {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–æ—á–∫–∏ */}
          <div className="add-waypoint-section">
            <h3>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É</h3>
            <div className="search-waypoint">
              <input
                type="text"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞..."
                value={newWaypointQuery}
                onChange={(e) => setNewWaypointQuery(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSearchWaypoint()}
                className="waypoint-search-input"
              />
              <button 
                onClick={handleSearchWaypoint}
                disabled={isSearching || !newWaypointQuery.trim()}
                className="search-waypoint-btn"
              >
                {isSearching ? 'üîç' : 'üîç'}
              </button>
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
            {searchResults.length > 0 && (
              <div className="search-results">
                {searchResults.map(result => (
                  <div 
                    key={result.id} 
                    className="search-result-item"
                    onClick={() => handleAddWaypoint(result)}
                  >
                    <span className="result-icon">üìç</span>
                    <span className="result-name">{result.name}</span>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ */}
          <div className="waypoints-list-section">
            <h3>üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç ({waypoints.length + 2} —Ç–æ—á–µ–∫)</h3>
            
            {waypoints.length === 0 ? (
              <div className="no-waypoints">
                <p>–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                <p className="hint">–î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏, —á—Ç–æ–±—ã –º–∞—Ä—à—Ä—É—Ç –ø—Ä–æ—Ö–æ–¥–∏–ª —á–µ—Ä–µ–∑ –Ω–∏—Ö</p>
              </div>
            ) : (
              <div className="waypoints-list">
                {/* –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ */}
                <div className="waypoint-item start-point">
                  <span className="waypoint-icon">üöÄ</span>
                  <span className="waypoint-name">–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞</span>
                  <span className="waypoint-type">–°—Ç–∞—Ä—Ç</span>
                </div>

                {/* –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ */}
                {waypoints.map((waypoint, index) => (
                  <div
                    key={waypoint.id}
                    className={`waypoint-item ${draggedIndex === index ? 'dragging' : ''}`}
                    draggable
                    onDragStart={(e) => handleDragStart(e, index)}
                    onDragOver={handleDragOver}
                    onDrop={(e) => handleDrop(e, index)}
                  >
                    <span className="waypoint-icon">üìç</span>
                    <div className="waypoint-info">
                      <span className="waypoint-name">{waypoint.name}</span>
                      <span className="waypoint-coords">
                        {waypoint.coordinates[0].toFixed(4)}, {waypoint.coordinates[1].toFixed(4)}
                      </span>
                    </div>
                    <div className="waypoint-actions">
                      <span className="drag-handle">‚ãÆ‚ãÆ</span>
                      <button 
                        className="remove-waypoint-btn"
                        onClick={() => handleRemoveWaypoint(waypoint.id)}
                        title="–£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                ))}

                {/* –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ */}
                <div className="waypoint-item end-point">
                  <span className="waypoint-icon">üèÅ</span>
                  <span className="waypoint-name">–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞</span>
                  <span className="waypoint-type">–§–∏–Ω–∏—à</span>
                </div>
              </div>
            )}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ */}
          {waypoints.length > 0 && (
            <div className="route-info-section">
              <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
              <div className="route-stats">
                <div className="stat-item">
                  <span className="stat-label">–í—Å–µ–≥–æ —Ç–æ—á–µ–∫:</span>
                  <span className="stat-value">{waypoints.length + 2}</span>
                </div>
                <div className="stat-item">
                  <span className="stat-label">–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö:</span>
                  <span className="stat-value">{waypoints.length}</span>
                </div>
              </div>
              
              <div className="route-tips">
                <p>üí° <strong>–°–æ–≤–µ—Ç—ã:</strong></p>
                <ul>
                  <li>–ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ —Ç–æ—á–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞</li>
                  <li>–ú–∞—Ä—à—Ä—É—Ç –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –≤—Å–µ —Ç–æ—á–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É</li>
                  <li>–ë–æ–ª—å—à–µ —Ç–æ—á–µ–∫ = –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π, –Ω–æ –¥–ª–∏–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç</li>
                </ul>
              </div>
            </div>
          )}
        </div>

        <div className="waypoints-actions">
          <button 
            className="clear-all-btn"
            onClick={() => onWaypointsChange([])}
            disabled={waypoints.length === 0}
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
          </button>
          <button className="apply-btn" onClick={onClose}>
            ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  )
}

export default WaypointsPanel
