import { useState, useEffect } from 'react'
import './RouteAnalysisPanel.css'

/**
 * üìä –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 */
const RouteAnalysisPanel = ({ 
  analysisData, 
  isVisible, 
  onClose,
  onAlternativeSelect 
}) => {
  const [activeTab, setActiveTab] = useState('overview')
  const [selectedSegment, setSelectedSegment] = useState(null)

  useEffect(() => {
    if (isVisible && analysisData) {
      setActiveTab('overview')
      setSelectedSegment(null)
    }
  }, [isVisible, analysisData])

  if (!isVisible || !analysisData) {
    return null
  }

  const { prioritizedSegments, routePriority, alternatives, recommendations, metadata } = analysisData

  const formatPriority = (priority) => {
    const percentage = Math.round(priority * 100)
    let color = '#dc3545' // –∫—Ä–∞—Å–Ω—ã–π
    if (percentage >= 70) color = '#28a745' // –∑–µ–ª–µ–Ω—ã–π
    else if (percentage >= 50) color = '#ffc107' // –∂–µ–ª—Ç—ã–π
    else if (percentage >= 30) color = '#fd7e14' // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    
    return { percentage, color }
  }

  const getPriorityIcon = (priority) => {
    if (priority >= 0.8) return 'üü¢'
    if (priority >= 0.6) return 'üü°'
    if (priority >= 0.4) return 'üü†'
    return 'üî¥'
  }

  return (
    <div className="route-analysis-overlay">
      <div className="route-analysis-panel">
        <div className="analysis-header">
          <h2>üìä –ê–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞</h2>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>

        <div className="analysis-tabs">
          <button 
            className={`tab ${activeTab === 'overview' ? 'active' : ''}`}
            onClick={() => setActiveTab('overview')}
          >
            üìà –û–±–∑–æ—Ä
          </button>
          <button 
            className={`tab ${activeTab === 'segments' ? 'active' : ''}`}
            onClick={() => setActiveTab('segments')}
          >
            üõ£Ô∏è –°–µ–≥–º–µ–Ω—Ç—ã
          </button>
          <button 
            className={`tab ${activeTab === 'alternatives' ? 'active' : ''}`}
            onClick={() => setActiveTab('alternatives')}
          >
            üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
          </button>
          <button 
            className={`tab ${activeTab === 'recommendations' ? 'active' : ''}`}
            onClick={() => setActiveTab('recommendations')}
          >
            üí° –°–æ–≤–µ—Ç—ã
          </button>
        </div>

        <div className="analysis-content">
          {activeTab === 'overview' && (
            <div className="overview-tab">
              <div className="route-summary">
                <div className="priority-score">
                  <div className="score-circle" style={{ 
                    background: `conic-gradient(${formatPriority(routePriority).color} ${formatPriority(routePriority).percentage}%, #e0e0e0 0%)` 
                  }}>
                    <span className="score-value">{formatPriority(routePriority).percentage}%</span>
                  </div>
                  <h3>–û–±—â–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞</h3>
                </div>

                <div className="route-stats">
                  <div className="stat-item">
                    <span className="stat-icon">üõ£Ô∏è</span>
                    <span className="stat-label">–°–µ–≥–º–µ–Ω—Ç–æ–≤</span>
                    <span className="stat-value">{prioritizedSegments.length}</span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-icon">üü¢</span>
                    <span className="stat-label">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</span>
                    <span className="stat-value">
                      {prioritizedSegments.filter(s => s.priority > 0.7).length}
                    </span>
                  </div>
                  <div className="stat-item">
                    <span className="stat-icon">üî¥</span>
                    <span className="stat-label">–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</span>
                    <span className="stat-value">
                      {prioritizedSegments.filter(s => s.priority < 0.4).length}
                    </span>
                  </div>
                </div>
              </div>

              <div className="factors-breakdown">
                <h4>üìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤</h4>
                <div className="factors-chart">
                  {Object.entries(metadata.factorsUsed || {}).map(([factor, weight]) => (
                    <div key={factor} className="factor-bar">
                      <div className="factor-info">
                        <span className="factor-icon">
                          {factor === 'speed' && '‚ö°'}
                          {factor === 'safety' && 'üõ°Ô∏è'}
                          {factor === 'traffic' && 'üö¶'}
                          {factor === 'ecology' && 'üå±'}
                          {factor === 'comfort' && 'üòå'}
                        </span>
                        <span className="factor-name">
                          {factor === 'speed' && '–°–∫–æ—Ä–æ—Å—Ç—å'}
                          {factor === 'safety' && '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'}
                          {factor === 'traffic' && '–¢—Ä–∞—Ñ–∏–∫'}
                          {factor === 'ecology' && '–≠–∫–æ–ª–æ–≥–∏—è'}
                          {factor === 'comfort' && '–ö–æ–º—Ñ–æ—Ä—Ç'}
                        </span>
                        <span className="factor-weight">{Math.round(weight * 100)}%</span>
                      </div>
                      <div className="factor-progress">
                        <div 
                          className="factor-fill" 
                          style={{ width: `${weight * 100}%` }}
                        ></div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'segments' && (
            <div className="segments-tab">
              <h3>üõ£Ô∏è –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º</h3>
              <div className="segments-list">
                {prioritizedSegments.map((segment, index) => (
                  <div 
                    key={segment.id} 
                    className={`segment-item ${selectedSegment === index ? 'selected' : ''}`}
                    onClick={() => setSelectedSegment(selectedSegment === index ? null : index)}
                  >
                    <div className="segment-header">
                      <span className="segment-icon">{getPriorityIcon(segment.priority)}</span>
                      <span className="segment-name">–°–µ–≥–º–µ–Ω—Ç {index + 1}</span>
                      <span className="segment-priority">
                        {formatPriority(segment.priority).percentage}%
                      </span>
                    </div>
                    
                    {selectedSegment === index && (
                      <div className="segment-details">
                        <div className="segment-info">
                          <div className="info-item">
                            <span>üõ£Ô∏è –¢–∏–ø –¥–æ—Ä–æ–≥–∏:</span>
                            <span>{segment.roadType}</span>
                          </div>
                          <div className="info-item">
                            <span>üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</span>
                            <span>{Math.round(segment.distance)} –º</span>
                          </div>
                          <div className="info-item">
                            <span>üö¶ –¢—Ä–∞—Ñ–∏–∫:</span>
                            <span>{Math.round(segment.trafficLevel * 100)}%</span>
                          </div>
                          <div className="info-item">
                            <span>üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</span>
                            <span>{Math.round(segment.safetyScore * 100)}%</span>
                          </div>
                        </div>
                        
                        <div className="segment-scores">
                          <h5>–û—Ü–µ–Ω–∫–∏ –ø–æ —Ñ–∞–∫—Ç–æ—Ä–∞–º:</h5>
                          {Object.entries(segment.scores).map(([factor, score]) => (
                            <div key={factor} className="score-item">
                              <span className="score-label">
                                {factor === 'speed' && '‚ö° –°–∫–æ—Ä–æ—Å—Ç—å'}
                                {factor === 'safety' && 'üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'}
                                {factor === 'traffic' && 'üö¶ –¢—Ä–∞—Ñ–∏–∫'}
                                {factor === 'ecology' && 'üå± –≠–∫–æ–ª–æ–≥–∏—è'}
                                {factor === 'comfort' && 'üòå –ö–æ–º—Ñ–æ—Ä—Ç'}
                              </span>
                              <div className="score-bar">
                                <div 
                                  className="score-fill" 
                                  style={{ width: `${score * 100}%` }}
                                ></div>
                              </div>
                              <span className="score-value">{Math.round(score * 100)}%</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'alternatives' && (
            <div className="alternatives-tab">
              <h3>üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã</h3>
              <p className="tab-description">
                –í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
              </p>
              
              <div className="alternatives-grid">
                {alternatives.map(alternative => (
                  <div key={alternative.type} className="alternative-card">
                    <div className="alternative-header">
                      <h4>{alternative.name}</h4>
                      <p>{alternative.description}</p>
                    </div>
                    
                    <div className="alternative-config">
                      {Object.entries(alternative.config).map(([factor, weight]) => (
                        <div key={factor} className="config-item">
                          <span className="config-factor">
                            {factor === 'speed' && '‚ö°'}
                            {factor === 'safety' && 'üõ°Ô∏è'}
                            {factor === 'traffic' && 'üö¶'}
                            {factor === 'ecology' && 'üå±'}
                            {factor === 'comfort' && 'üòå'}
                          </span>
                          <span className="config-weight">{Math.round(weight * 100)}%</span>
                        </div>
                      ))}
                    </div>
                    
                    <button 
                      className="select-alternative-btn"
                      onClick={() => onAlternativeSelect && onAlternativeSelect(alternative)}
                    >
                      –í—ã–±—Ä–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'recommendations' && (
            <div className="recommendations-tab">
              <h3>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
              
              {recommendations.length === 0 ? (
                <div className="no-recommendations">
                  <span className="success-icon">‚úÖ</span>
                  <h4>–û—Ç–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç!</h4>
                  <p>–ù–∏–∫–∞–∫–∏—Ö –æ—Å–æ–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ú–∞—Ä—à—Ä—É—Ç –æ–ø—Ç–∏–º–∞–ª–µ–Ω –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.</p>
                </div>
              ) : (
                <div className="recommendations-list">
                  {recommendations.map((rec, index) => (
                    <div key={index} className={`recommendation-item ${rec.type}`}>
                      <div className="rec-icon">{rec.icon}</div>
                      <div className="rec-content">
                        <h4>{rec.title}</h4>
                        <p>{rec.message}</p>
                      </div>
                    </div>
                  ))}
                </div>
              )}
              
              <div className="general-tips">
                <h4>üìã –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã</h4>
                <ul>
                  <li>üïê –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏</li>
                  <li>üå§Ô∏è –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥ –≤—ã–µ–∑–¥–æ–º</li>
                  <li>üö¶ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–æ—Ä–æ–∂–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
                  <li>‚õΩ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–∞–≤–∫–∏ –∏ –æ—Ç–¥—ã—Ö–∞</li>
                  <li>üì± –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞—Ä—è–∂–µ–Ω–Ω—ã–º –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</li>
                </ul>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default RouteAnalysisPanel
