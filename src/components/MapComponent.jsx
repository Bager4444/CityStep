import React, { useEffect, useRef, useState } from 'react'
import { MapContainer, TileLayer, Marker, Popup, Polyline, CircleMarker, useMap } from 'react-leaflet'
import L from 'leaflet'
import MapLayerSelector, { MAP_PROVIDERS } from './MapLayerSelector'
import 'leaflet/dist/leaflet.css'

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è Leaflet
delete L.Icon.Default.prototype._getIconUrl
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
})

// –ö–∞—Å—Ç–æ–º–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
})

// –ò–∫–æ–Ω–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
const startIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
})

// –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
const endIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
})

// –ò–∫–æ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞
const waypointIcon = new L.Icon({
  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-orange.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowSize: [41, 41]
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–∫–æ–Ω–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º
const createNumberedWaypointIcon = (number) => {
  return new L.DivIcon({
    html: `
      <div style="
        background: linear-gradient(135deg, #ff6b35, #f7931e);
        color: white;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 14px;
        border: 3px solid white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        position: relative;
      ">
        ${number}
        <div style="
          position: absolute;
          bottom: -8px;
          left: 50%;
          transform: translateX(-50%);
          width: 0;
          height: 0;
          border-left: 6px solid transparent;
          border-right: 6px solid transparent;
          border-top: 8px solid #ff6b35;
        "></div>
      </div>
    `,
    className: 'numbered-waypoint-icon',
    iconSize: [30, 38],
    iconAnchor: [15, 38],
    popupAnchor: [0, -38]
  })
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
function ChangeView({ center, zoom }) {
  const map = useMap()
  useEffect(() => {
    map.setView(center, zoom)
  }, [center, zoom, map])
  return null
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–π –∫–∞—Ä—Ç—ã
function MapEventHandler({ onMapMove }) {
  const map = useMap()

  useEffect(() => {
    if (!onMapMove) return

    const handleMoveEnd = () => {
      const center = map.getCenter()
      const zoom = map.getZoom()
      console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞:', { center: [center.lat, center.lng], zoom })
      onMapMove([center.lat, center.lng], zoom)
    }

    map.on('moveend', handleMoveEnd)
    map.on('zoomend', handleMoveEnd)

    return () => {
      map.off('moveend', handleMoveEnd)
      map.off('zoomend', handleMoveEnd)
    }
  }, [map, onMapMove])

  return null
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
function ResizeMap({ className }) {
  const map = useMap()
  useEffect(() => {
    if (className?.includes('fullscreen')) {
      console.log('üó∫Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞')

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      const updateSize = () => {
        console.log('üó∫Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã')
        map.invalidateSize(true) // true = –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

        // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≤—Ä—É—á–Ω—É—é
        const container = map.getContainer()
        if (container) {
          console.log('üó∫Ô∏è –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', {
            offsetWidth: container.offsetWidth,
            offsetHeight: container.offsetHeight,
            clientWidth: container.clientWidth,
            clientHeight: container.clientHeight
          })
        }
      }

      // –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
      setTimeout(updateSize, 50)
      setTimeout(updateSize, 200)
      setTimeout(updateSize, 500)
      setTimeout(updateSize, 1000)

      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
      const handleResize = () => {
        console.log('üó∫Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É')
        updateSize()
      }

      window.addEventListener('resize', handleResize)
      return () => window.removeEventListener('resize', handleResize)
    }
  }, [className, map])
  return null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–≥–ª–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
function calculateBearing(start, end) {
  const lat1 = start[0] * Math.PI / 180
  const lat2 = end[0] * Math.PI / 180
  const deltaLng = (end[1] - start[1]) * Math.PI / 180

  const x = Math.sin(deltaLng) * Math.cos(lat2)
  const y = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(deltaLng)

  const bearing = Math.atan2(x, y) * 180 / Math.PI
  return (bearing + 360) % 360 // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-360 –≥—Ä–∞–¥—É—Å–æ–≤
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞–Ω–∏—è GPS –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
function projectPositionOnRoute(gpsPosition, routeCoordinates) {
  if (!gpsPosition || !routeCoordinates || routeCoordinates.length < 2) {
    return routeCoordinates?.[0] || null
  }

  let minDistance = Infinity
  let nearestPoint = routeCoordinates[0]
  let nearestIndex = 0

  // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
  for (let i = 0; i < routeCoordinates.length; i++) {
    const routePoint = routeCoordinates[i]
    const distance = Math.sqrt(
      Math.pow(gpsPosition[0] - routePoint[0], 2) +
      Math.pow(gpsPosition[1] - routePoint[1], 2)
    )

    if (distance < minDistance) {
      minDistance = distance
      nearestPoint = routePoint
      nearestIndex = i
    }
  }

  return { point: nearestPoint, index: nearestIndex }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞–Ω–∏—è GPS –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
function projectGPSOnRoute(gpsPosition, routeCoordinates) {
  if (!gpsPosition || !routeCoordinates || routeCoordinates.length < 2) {
    return { point: routeCoordinates?.[0] || null, index: 0 }
  }

  let minDistance = Infinity
  let nearestPoint = routeCoordinates[0]
  let nearestIndex = 0

  // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ –∫ GPS –ø–æ–∑–∏—Ü–∏–∏
  for (let i = 0; i < routeCoordinates.length; i++) {
    const routePoint = routeCoordinates[i]
    const distance = Math.sqrt(
      Math.pow(gpsPosition[0] - routePoint[0], 2) +
      Math.pow(gpsPosition[1] - routePoint[1], 2)
    )

    if (distance < minDistance) {
      minDistance = distance
      nearestPoint = routePoint
      nearestIndex = i
    }
  }

  return { point: nearestPoint, index: nearestIndex }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
function calculateDistance(point1, point2) {
  const R = 6371000 // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
  const lat1 = point1[0] * Math.PI / 180
  const lat2 = point2[0] * Math.PI / 180
  const deltaLat = (point2[0] - point1[0]) * Math.PI / 180
  const deltaLng = (point2[1] - point1[1]) * Math.PI / 180

  const a = Math.sin(deltaLat/2) * Math.sin(deltaLat/2) +
    Math.cos(lat1) * Math.cos(lat2) *
    Math.sin(deltaLng/2) * Math.sin(deltaLng/2)
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))

  return R * c
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
function getTurnDirection(bearing1, bearing2) {
  let diff = bearing2 - bearing1
  if (diff > 180) diff -= 360
  if (diff < -180) diff += 360

  if (Math.abs(diff) < 15) return '–ø—Ä—è–º–æ'
  if (diff > 15 && diff < 45) return '—Å–ª–µ–≥–∫–∞ –Ω–∞–ø—Ä–∞–≤–æ'
  if (diff >= 45 && diff < 135) return '–Ω–∞–ø—Ä–∞–≤–æ'
  if (diff >= 135) return '—Ä–µ–∑–∫–æ –Ω–∞–ø—Ä–∞–≤–æ'
  if (diff < -15 && diff > -45) return '—Å–ª–µ–≥–∫–∞ –Ω–∞–ª–µ–≤–æ'
  if (diff <= -45 && diff > -135) return '–Ω–∞–ª–µ–≤–æ'
  if (diff <= -135) return '—Ä–µ–∑–∫–æ –Ω–∞–ª–µ–≤–æ'

  return '–ø—Ä—è–º–æ'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞
function findNextTurn(currentIndex, routeCoordinates) {
  if (!routeCoordinates || routeCoordinates.length < 3 || currentIndex >= routeCoordinates.length - 2) {
    return null
  }

  const currentPoint = routeCoordinates[currentIndex]
  let currentBearing = null

  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  if (currentIndex < routeCoordinates.length - 1) {
    currentBearing = calculateBearing(currentPoint, routeCoordinates[currentIndex + 1])
  }

  // –ò—â–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
  for (let i = currentIndex + 1; i < routeCoordinates.length - 1; i++) {
    const nextBearing = calculateBearing(routeCoordinates[i], routeCoordinates[i + 1])

    if (currentBearing !== null) {
      const turnDirection = getTurnDirection(currentBearing, nextBearing)

      if (turnDirection !== '–ø—Ä—è–º–æ') {
        const distance = calculateDistance(currentPoint, routeCoordinates[i])
        return {
          direction: turnDirection,
          distance: Math.round(distance),
          point: routeCoordinates[i]
        }
      }
    }

    currentBearing = nextBearing
  }

  return null
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ - –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù
function DynamicRotateMap({ route, className, arrowPosition }) {
  const map = useMap()

  useEffect(() => {
    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –ü–û–í–û–†–û–¢ –ö–ê–†–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ú–ê–†–®–†–£–¢–ê
    console.log('üó∫Ô∏è DynamicRotateMap –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞')

    // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç
    if (map.getContainer()) {
      map.getContainer().style.transform = 'rotate(0deg)'
    }
  }, [route, className, arrowPosition, map])

  return null
}

// –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è Leaflet
const createArrowIcon = () => {
  return L.divIcon({
    className: 'navigation-arrow-marker',
    html: '<div class="navigation-arrow-triangle"></div>',
    iconSize: [60, 52],
    iconAnchor: [30, 26],
    popupAnchor: [0, -26]
  })
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–∫ –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
function NavigationArrowMarker({ route, className, arrowPosition }) {
  if (!className?.includes('fullscreen') || !route?.coordinates || route.coordinates.length < 2 || !arrowPosition) {
    return null
  }

  const arrowIcon = createArrowIcon()

  return (
    <Marker
      position={arrowPosition}
      icon={arrowIcon}
      interactive={false}
      zIndexOffset={1000}
    >
      <Popup>
        <strong>üß≠ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞</strong>
        <br />
        –°—Ç—Ä–µ–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
      </Popup>
    </Marker>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞
function NextTurnPanel({ route, arrowPosition }) {
  const [nextTurn, setNextTurn] = useState(null)
  const [currentIndex, setCurrentIndex] = useState(0)

  useEffect(() => {
    if (!route?.coordinates || !arrowPosition) return

    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
    const projection = projectGPSOnRoute(arrowPosition, route.coordinates)
    setCurrentIndex(projection.index)

    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–≤–æ—Ä–æ—Ç
    const turn = findNextTurn(projection.index, route.coordinates)
    setNextTurn(turn)
  }, [route, arrowPosition])

  if (!nextTurn) {
    return (
      <div className="next-turn-panel">
        <div className="turn-icon">üéØ</div>
        <div className="turn-info">
          <div className="turn-direction">–ü—Ä—è–º–æ</div>
          <div className="turn-distance">–¥–æ —Ü–µ–ª–∏</div>
        </div>
      </div>
    )
  }

  // –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞
  const getTurnIcon = (direction) => {
    if (direction.includes('–Ω–∞–ª–µ–≤–æ')) return '‚¨ÖÔ∏è'
    if (direction.includes('–Ω–∞–ø—Ä–∞–≤–æ')) return '‚û°Ô∏è'
    if (direction.includes('—Ä–µ–∑–∫–æ –Ω–∞–ª–µ–≤–æ')) return '‚Ü©Ô∏è'
    if (direction.includes('—Ä–µ–∑–∫–æ –Ω–∞–ø—Ä–∞–≤–æ')) return '‚Ü™Ô∏è'
    return '‚¨ÜÔ∏è'
  }

  return (
    <div className="next-turn-panel">
      <div className="turn-icon">{getTurnIcon(nextTurn.direction)}</div>
      <div className="turn-info">
        <div className="turn-direction">{nextTurn.direction}</div>
        <div className="turn-distance">{nextTurn.distance} –º</div>
      </div>
    </div>
  )
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–µ–ª–∫–µ - –û–¢–ö–õ–Æ–ß–ï–ù
function FollowArrow({ arrowPosition, className }) {
  // –ö–∞—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—á–Ω–æ–π –¥–∞–∂–µ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
  console.log('üó∫Ô∏è FollowArrow –æ—Ç–∫–ª—é—á–µ–Ω - –∫–∞—Ä—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ–π –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏')
  return null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∞
function calculateRemainingDistance(currentIndex, routeCoordinates) {
  if (!routeCoordinates || currentIndex >= routeCoordinates.length - 1) {
    return 0
  }

  let totalDistance = 0

  // –°—É–º–º–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—Ä—à—Ä—É—Ç–∞
  for (let i = currentIndex; i < routeCoordinates.length - 1; i++) {
    totalDistance += calculateDistance(routeCoordinates[i], routeCoordinates[i + 1])
  }

  return totalDistance
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏
function RemainingInfoPanel({ route, arrowPosition }) {
  const [remainingInfo, setRemainingInfo] = useState({ distance: 0, time: 0 })

  useEffect(() => {
    if (!route?.coordinates || !arrowPosition) return

    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
    const projection = projectGPSOnRoute(arrowPosition, route.coordinates)

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    const remainingDistance = calculateRemainingDistance(projection.index, route.coordinates)

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è (—Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—à–µ—Ö–æ–¥–∞ 5 –∫–º/—á = 1.39 –º/—Å)
    const walkingSpeedMps = 1.39 // –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    const remainingTimeSeconds = remainingDistance / walkingSpeedMps

    setRemainingInfo({
      distance: Math.round(remainingDistance),
      time: Math.round(remainingTimeSeconds / 60) // –≤ –º–∏–Ω—É—Ç–∞—Ö
    })
  }, [route, arrowPosition])

  const formatDistance = (meters) => {
    if (meters >= 1000) {
      return `${(meters / 1000).toFixed(1)} –∫–º`
    }
    return `${meters} –º`
  }

  const formatTime = (minutes) => {
    if (minutes >= 60) {
      const hours = Math.floor(minutes / 60)
      const mins = minutes % 60
      return `${hours}—á ${mins}–º`
    }
    return `${minutes} –º–∏–Ω`
  }

  return (
    <div className="remaining-info-panel">
      <div className="remaining-item">
        <div className="remaining-icon">üìè</div>
        <div className="remaining-details">
          <div className="remaining-label">–û—Å—Ç–∞–ª–æ—Å—å</div>
          <div className="remaining-value">{formatDistance(remainingInfo.distance)}</div>
        </div>
      </div>
      <div className="remaining-separator"></div>
      <div className="remaining-item">
        <div className="remaining-icon">‚è±Ô∏è</div>
        <div className="remaining-details">
          <div className="remaining-label">–í—Ä–µ–º—è</div>
          <div className="remaining-value">{formatTime(remainingInfo.time)}</div>
        </div>
      </div>
    </div>
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞–π–ª–æ–≤, –ø–æ–∫—Ä—ã–≤–∞—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç
function calculateRouteTiles(route, zoomLevel) {
  if (!route) return []

  const tiles = new Set()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –Ω–æ–º–µ—Ä —Ç–∞–π–ª–∞
  const coordToTile = (lat, lon, zoom) => {
    const x = Math.floor((lon + 180) / 360 * Math.pow(2, zoom))
    const y = Math.floor((1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom))
    return { x, y, z: zoom }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–Ω—É—é –∑–æ–Ω—É –≤–æ–∫—Ä—É–≥ –º–∞—Ä—à—Ä—É—Ç–∞ (–≤ —Ç–∞–π–ª–∞—Ö)
  const bufferTiles = 2 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è

  let allCoordinates = []

  // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
  if (route.segments && route.segments.length > 0) {
    route.segments.forEach(segment => {
      segment.geometry.coordinates.forEach(coord => {
        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç OSRM –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ [lon, lat]
        allCoordinates.push([coord[1], coord[0]]) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ [lat, lon]
      })
    })
  } else if (route.coordinates) {
    allCoordinates = route.coordinates.map(coord => [coord[1], coord[0]]) // [lat, lon]
  }

  console.log(`üó∫Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${allCoordinates.length} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –∑—É–º–∞ ${zoomLevel}`)

  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –º–∞—Ä—à—Ä—É—Ç–∞
  allCoordinates.forEach((coord, index) => {
    const lat = coord[0]
    const lon = coord[1]

    if (index < 3) {
      console.log(`üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ ${index + 1}: [${lat}, ${lon}]`)
    }

    const tile = coordToTile(lat, lon, zoomLevel)

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–ª –∏ –±—É—Ñ–µ—Ä–Ω—ã–µ —Ç–∞–π–ª—ã –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ
    for (let dx = -bufferTiles; dx <= bufferTiles; dx++) {
      for (let dy = -bufferTiles; dy <= bufferTiles; dy++) {
        const tileKey = `${tile.z}/${tile.x + dx}/${tile.y + dy}`
        tiles.add(tileKey)
      }
    }
  })

  console.log(`üó∫Ô∏è –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ ${tiles.size} —Ç–∞–π–ª–æ–≤ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –∑—É–º–µ ${zoomLevel}`)
  return Array.from(tiles)
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–æ–≤ —Ç–æ–ª—å–∫–æ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
function OptimizedTileLayer({ route, currentProviderConfig, mapKey }) {
  const map = useMap()
  const [routeTiles, setRouteTiles] = useState([])
  const tileLayerRef = useRef(null)

  useEffect(() => {
    if (!route || !map) return

    const currentZoom = map.getZoom()
    console.log('üó∫Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–∞–π–ª–æ–≤ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞...')

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–π–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑—É–º–∞
    const tiles = calculateRouteTiles(route, currentZoom)
    setRouteTiles(tiles)

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π TileLayer —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
    if (tileLayerRef.current) {
      map.removeLayer(tileLayerRef.current)
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ç–∞–π–ª–æ–≤
    tileLayerRef.current = L.tileLayer(currentProviderConfig.url, {
      attribution: currentProviderConfig.attribution,
      maxZoom: currentProviderConfig.maxZoom,
      crossOrigin: true,
      // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–∞–π–ª–æ–≤
      createTile: function(coords, done) {
        const tileKey = `${coords.z}/${coords.x}/${coords.y}`

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —ç—Ç–æ—Ç —Ç–∞–π–ª –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
        if (!tiles.includes(tileKey)) {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π div –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–∞
          const emptyTile = document.createElement('div')
          emptyTile.style.backgroundColor = '#f8f8f8'
          emptyTile.style.border = '1px solid #e0e0e0'
          emptyTile.style.width = '256px'
          emptyTile.style.height = '256px'
          emptyTile.style.display = 'flex'
          emptyTile.style.alignItems = 'center'
          emptyTile.style.justifyContent = 'center'
          emptyTile.style.fontSize = '12px'
          emptyTile.style.color = '#999'
          emptyTile.textContent = 'üöÄ'
          done(null, emptyTile)
          return emptyTile
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–π–ª –∫–∞–∫ –æ–±—ã—á–Ω–æ
        const tile = document.createElement('img')
        tile.onload = () => done(null, tile)
        tile.onerror = () => {
          console.warn(`üó∫Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–∞ ${tileKey}`)
          done(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–∞'))
        }
        tile.src = this.getTileUrl(coords)
        return tile
      }
    })

    map.addLayer(tileLayerRef.current)

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑—É–º–∞
    const handleZoomEnd = () => {
      const newZoom = map.getZoom()
      const newTiles = calculateRouteTiles(route, newZoom)
      setRouteTiles(newTiles)
    }

    map.on('zoomend', handleZoomEnd)

    return () => {
      map.off('zoomend', handleZoomEnd)
      if (tileLayerRef.current) {
        map.removeLayer(tileLayerRef.current)
      }
    }
  }, [route, currentProviderConfig, map, mapKey])

  return null
}

function MapComponent({
  center,
  markers,
  route,
  waypoints = [], // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
  userLocation,
  zoom = 12,
  onMapClick,
  onMapMove, // –ù–æ–≤—ã–π –ø—Ä–æ–ø—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏–π –∫–∞—Ä—Ç—ã
  className
}) {
  const mapRef = useRef()
  const [currentProvider, setCurrentProvider] = useState('osm')
  const [mapKey, setMapKey] = useState(0) // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
  const [arrowPosition, setArrowPosition] = useState(null)
  const [useOptimizedTiles, setUseOptimizedTiles] = useState(false) // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞
  useEffect(() => {
    console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∏:', {
      isFullscreen: className?.includes('fullscreen'),
      hasRoute: !!route,
      hasCoordinates: !!route?.coordinates,
      coordinatesLength: route?.coordinates?.length
    })

    if (className?.includes('fullscreen') && route?.coordinates && route.coordinates.length >= 2) {
      // –°—Ç—Ä–µ–ª–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞
      const startPosition = route.coordinates[0]
      console.log('üó∫Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞ –Ω–∞—á–∞–ª–æ –º–∞—Ä—à—Ä—É—Ç–∞:', startPosition)
      setArrowPosition(startPosition)
    }
  }, [route, className])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // –°—Ç—Ä–µ–ª–∫–∞ –ø—Ä–æ–µ—Ü–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å GPS
  useEffect(() => {
    if (className?.includes('fullscreen') && userLocation && route?.coordinates) {
      const projection = projectGPSOnRoute(userLocation, route.coordinates)
      setArrowPosition(projection.point)
    } else if (className?.includes('fullscreen') && !userLocation && route?.coordinates) {
      // –ï—Å–ª–∏ –Ω–µ—Ç GPS, —Å—Ç—Ä–µ–ª–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞
      setArrowPosition(route.coordinates[0])
    }
  }, [userLocation, className, route])

  // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ
  useEffect(() => {
    if (route?.segments && route.segments.length > 0 && mapRef.current) {
      console.log('üó∫Ô∏è –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ...')
      console.log('üó∫Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:', route.segments.length)

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≤—Å–µ—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
      const allCoordinates = []
      route.segments.forEach((segment, index) => {
        console.log(`üó∫Ô∏è –°–µ–≥–º–µ–Ω—Ç ${index + 1}: ${segment.geometry.coordinates.length} –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç`)
        segment.geometry.coordinates.forEach(coord => {
          allCoordinates.push([coord[1], coord[0]]) // [lat, lon]
        })
      })

      console.log('üó∫Ô∏è –í—Å–µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è:', allCoordinates.length)
      console.log('üó∫Ô∏è –ü–µ—Ä–≤—ã–µ 3 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', allCoordinates.slice(0, 3))

      if (allCoordinates.length > 0) {
        const bounds = L.latLngBounds(allCoordinates)
        console.log('üó∫Ô∏è –ì—Ä–∞–Ω–∏—Ü—ã –º–∞—Ä—à—Ä—É—Ç–∞:', bounds)
        mapRef.current.fitBounds(bounds, { padding: [20, 20] })
        console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ')
      }
    } else if (route?.coordinates && route.coordinates.length > 0 && mapRef.current) {
      console.log('üó∫Ô∏è –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –º–∞—Ä—à—Ä—É—Ç–µ...')
      const routeCoordinates = route.coordinates.map(coord => [coord[1], coord[0]]) // [lat, lon]
      const bounds = L.latLngBounds(routeCoordinates)
      mapRef.current.fitBounds(bounds, { padding: [20, 20] })
      console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –º–∞—Ä—à—Ä—É—Ç–µ')
    }
  }, [route])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–ª–æ–≤ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ - –û–¢–ö–õ–Æ–ß–ï–ù–û –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
  useEffect(() => {
    if (route?.coordinates && route.coordinates.length > 0) {
      // setUseOptimizedTiles(true) // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ
      console.log('üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
    } else {
      setUseOptimizedTiles(false)
      console.log('üó∫Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–ª–æ–≤')
    }
  }, [route])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–∞—Ä—Ç—ã
  const handleProviderChange = (providerId) => {
    setCurrentProvider(providerId)
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è TileLayer
    setMapKey(prev => prev + 1)
  }

  const currentProviderConfig = MAP_PROVIDERS[currentProvider]

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ center —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  // –í –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∫–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Ç–æ—á–Ω–æ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞
  const validCenter = className?.includes('fullscreen') && route?.coordinates?.[0]
    ? route.coordinates[0] // –ü—Ä—è–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞
    : (Array.isArray(center) && center.length === 2 ? center : [55.7558, 37.6176])

  const isFullscreen = className?.includes('fullscreen')

  console.log('üó∫Ô∏è MapComponent render:', {
    center: validCenter,
    zoom,
    className,
    isFullscreen,
    routeExists: !!route,
    routeCoordinatesLength: route?.coordinates?.length,
    routeStartCoords: route?.coordinates?.[0],
    routeEndCoords: route?.coordinates?.[route?.coordinates?.length - 1],
    routeFrom: route?.from,
    routeTo: route?.to,
    routeDistance: route?.distance,
    routeDuration: route?.duration,
    routeSegments: route?.segments?.length,
    arrowPosition
  })

  return (
    <div className={`map-wrapper ${className || ''}`}>
      {/* –°–µ–ª–µ–∫—Ç–æ—Ä —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã */}
      <MapLayerSelector
        currentProvider={currentProvider}
        onProviderChange={handleProviderChange}
      />

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–ª–æ–≤ */}
      {route && (
        <div className="tile-optimization-toggle" style={{
          position: 'absolute',
          top: '10px',
          right: '10px',
          zIndex: 1000,
          background: 'white',
          padding: '8px 12px',
          borderRadius: '4px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
          fontSize: '12px'
        }}>
          <label style={{ display: 'flex', alignItems: 'center', gap: '6px', cursor: 'pointer' }}>
            <input
              type="checkbox"
              checked={useOptimizedTiles}
              onChange={(e) => {
                setUseOptimizedTiles(e.target.checked)
                console.log('üó∫Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–π–ª–æ–≤:', e.target.checked ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞')
              }}
            />
            <span>üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–∞–π–ª–æ–≤</span>
          </label>
          <div style={{ fontSize: '10px', color: '#666', marginTop: '2px' }}>
            {useOptimizedTiles ? '–ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–∞–π–ª—ã –º–∞—Ä—à—Ä—É—Ç–∞' : '–ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤—Å–µ —Ç–∞–π–ª—ã'}
          </div>
        </div>
      )}

      <MapContainer
        center={validCenter}
        zoom={zoom}
        style={{
          height: '100%',
          width: '100%',
          minHeight: isFullscreen ? '100vh' : '100%',
          minWidth: isFullscreen ? '100vw' : '100%'
        }}
        ref={mapRef}
        eventHandlers={{
          ...(onMapClick ? {
            click: (e) => {
              console.log('üó∫Ô∏è –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ:', e.latlng)
              onMapClick(e.latlng)
            }
          } : {}),
          whenReady: () => {
            console.log('üó∫Ô∏è MapContainer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
            if (mapRef.current) {
              setTimeout(() => {
                console.log('üó∫Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã')
                mapRef.current.invalidateSize()
              }, 100)
            }
          }
        }}
        dragging={false}
        touchZoom={false}
        doubleClickZoom={false}
        scrollWheelZoom={false}
        boxZoom={false}
        keyboard={false}
        zoomControl={false}
        attributionControl={true}
      >
        <ChangeView center={validCenter} zoom={zoom} />
        <MapEventHandler onMapMove={onMapMove} />
        <ResizeMap className={className} />
        <DynamicRotateMap route={route} className={className} arrowPosition={arrowPosition} />

        {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ª–æ–π –∫–∞—Ä—Ç—ã - –í–†–ï–ú–ï–ù–ù–û –¢–û–õ–¨–ö–û –û–ë–´–ß–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê */}
        <TileLayer
          key={`${mapKey}-${isFullscreen ? 'fullscreen' : 'normal'}`}
          attribution={currentProviderConfig.attribution}
          url={currentProviderConfig.url}
          maxZoom={currentProviderConfig.maxZoom}
          crossOrigin={true}
          updateWhenIdle={false}
          updateWhenZooming={true}
          keepBuffer={2}
          eventHandlers={{
            tileerror: (e) => {
              console.warn('üó∫Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–∞:', e)
              console.warn('üó∫Ô∏è URL —Ç–∞–π–ª–∞:', e.tile?.src)
              console.warn('üó∫Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∫–∞—Ä—Ç—ã –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É')
            },
            tileload: (e) => {
              console.log('üó∫Ô∏è –¢–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ:', e.tile?.src)
            },
            loading: (e) => {
              console.log('üó∫Ô∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–ª–æ–≤... (—Ä–µ–∂–∏–º:', isFullscreen ? '–ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π' : '–æ–±—ã—á–Ω—ã–π', ')')
            },
            load: (e) => {
              console.log('üó∫Ô∏è –í—Å–µ —Ç–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã! (—Ä–µ–∂–∏–º:', isFullscreen ? '–ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π' : '–æ–±—ã—á–Ω—ã–π', ')')
            },
            add: (e) => {
              console.log('üó∫Ô∏è TileLayer –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É')
            }
          }}
        />

        {/* –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê */}
        {/* {useOptimizedTiles && route ? (
          <OptimizedTileLayer
            route={route}
            currentProviderConfig={currentProviderConfig}
            mapKey={mapKey}
          />
        ) : null} */}

        {/* –ú–∞—Ä–∫–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ */}
        {markers.map((marker, index) => (
          <Marker key={index} position={[marker.lat, marker.lon]}>
            <Popup>
              <div>
                <strong>{marker.address?.road || marker.address?.amenity || '–ù–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ'}</strong>
                <br />
                {marker.address?.house_number && `${marker.address.house_number}, `}
                {marker.address?.suburb || marker.address?.city_district || ''}
                <br />
                <small>{marker.display_name}</small>
              </div>
            </Popup>
          </Marker>
        ))}

        {/* –ú–∞—Ä–∫–µ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        {userLocation && (
          <Marker position={userLocation} icon={userIcon}>
            <Popup>
              <strong>–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</strong>
            </Popup>
          </Marker>
        )}



        {/* –ú–∞—Ä—à—Ä—É—Ç */}
        {route && (
          <>
            {console.log('üó∫Ô∏è –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –∫–∞—Ä—Ç–µ:', {
              coordinates: route.coordinates?.length,
              segments: route.segments?.length,
              from: route.from,
              to: route.to,
              firstCoord: route.coordinates?.[0],
              lastCoord: route.coordinates?.[route.coordinates?.length - 1],
              coordinatesType: typeof route.coordinates,
              coordinatesIsArray: Array.isArray(route.coordinates)
            })}
            {/* –õ–∏–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ */}
            {route.segments && route.segments.length > 0 ? (
              // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ü–≤–µ—Ç–æ–º
              route.segments.map((segment, index) => {
                const colors = ['#2196F3', '#4CAF50', '#FF9800', '#9C27B0', '#F44336'] // –°–∏–Ω–∏–π, –∑–µ–ª–µ–Ω—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π, –∫—Ä–∞—Å–Ω—ã–π
                const segmentColor = colors[index % colors.length]

                console.log(`üó∫Ô∏è *** –°–û–ó–î–ê–ï–ú –°–ï–ì–ú–ï–ù–¢ ${index + 1} ***`)
                console.log(`üó∫Ô∏è –¶–≤–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞: ${segmentColor}`)
                console.log(`üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Å–µ–≥–º–µ–Ω—Ç–µ: ${segment.geometry.coordinates.length}`)
                console.log(`üó∫Ô∏è –ü–µ—Ä–≤—ã–µ 3 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞:`, segment.geometry.coordinates.slice(0, 3))

                const segmentPositions = segment.geometry.coordinates.map(coord => [coord[1], coord[0]])
                console.log(`üó∫Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 3):`, segmentPositions.slice(0, 3))

                return (
                  <Polyline
                    key={`segment-${index}`}
                    positions={segmentPositions}
                    color={segmentColor}
                    weight={8}
                    opacity={1.0}
                  >
                    <Popup>
                      <strong>üõ£Ô∏è –°–µ–≥–º–µ–Ω—Ç {index + 1}</strong>
                      <br />
                      üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {(segment.distance / 1000).toFixed(1)} –∫–º
                      <br />
                      ‚è±Ô∏è –í—Ä–µ–º—è: {Math.round(segment.duration / 60)} –º–∏–Ω ({segment.duration}—Å)
                      <br />
                      üö∂ –°–∫–æ—Ä–æ—Å—Ç—å: {((segment.distance / 1000) / (segment.duration / 3600)).toFixed(1)} –∫–º/—á
                      <br />
                      üé® –¶–≤–µ—Ç: {segmentColor}
                      <br />
                      üìç –¢–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞: {segment.geometry.coordinates.length}
                    </Popup>
                  </Polyline>
                )
              })
            ) : (
              // –û–±—ã—á–Ω—ã–π –µ–¥–∏–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
              (() => {
                const positions = route.coordinates.map(coord => [coord[1], coord[0]]) // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ lon,lat -> lat,lon
                console.log('üó∫Ô∏è *** –°–û–ó–î–ê–ï–ú –ï–î–ò–ù–´–ô –ú–ê–†–®–†–£–¢ ***')
                console.log('üó∫Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø–µ—Ä–≤—ã–µ 3):', route.coordinates.slice(0, 3))
                console.log('üó∫Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 3):', positions.slice(0, 3))
                console.log('üó∫Ô∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:', positions.length)

                return (
                  <Polyline
                    positions={positions}
                    color="#2196F3"
                    weight={6}
                    opacity={0.9}
                  >
                    <Popup>
                      <strong>üõ£Ô∏è –ü—Ä—è–º–æ–π –º–∞—Ä—à—Ä—É—Ç</strong>
                      <br />
                      üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {(route.distance / 1000).toFixed(1)} –∫–º
                      <br />
                      ‚è±Ô∏è –í—Ä–µ–º—è: {Math.round(route.duration / 60)} –º–∏–Ω ({route.duration}—Å)
                      <br />
                      üö∂ –°–∫–æ—Ä–æ—Å—Ç—å: {((route.distance / 1000) / (route.duration / 3600)).toFixed(1)} –∫–º/—á
                    </Popup>
                  </Polyline>
                )
              })()
            )}

            {/* –ú–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ */}
            <Marker position={route.from} icon={startIcon}>
              <Popup>
                <strong>–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞</strong>
              </Popup>
            </Marker>

            {/* –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ */}
            {waypoints.map((waypoint, index) => (
              <Marker
                key={waypoint.id}
                position={waypoint.coordinates}
                icon={createNumberedWaypointIcon(index + 1)}
              >
                <Popup>
                  <strong>üìç –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Ç–æ—á–∫–∞ {index + 1}</strong>
                  <br />
                  <div style={{ maxWidth: '200px', fontSize: '13px' }}>
                    {waypoint.name}
                  </div>
                  <br />
                  <small style={{ color: '#666' }}>
                    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {waypoint.coordinates[0].toFixed(4)}, {waypoint.coordinates[1].toFixed(4)}
                  </small>
                  <br />
                  <small style={{ color: '#888', fontSize: '11px' }}>
                    –ü–æ—Ä—è–¥–æ–∫ –≤ –º–∞—Ä—à—Ä—É—Ç–µ: {index + 1} –∏–∑ {waypoints.length}
                  </small>
                </Popup>
              </Marker>
            ))}

            {/* –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç—ã) */}
            {route.segments && route.segments.length > 1 && route.segments.map((segment, index) => {
              const startCoord = segment.geometry.coordinates[0]
              const endCoord = segment.geometry.coordinates[segment.geometry.coordinates.length - 1]

              return (
                <React.Fragment key={`segment-debug-${index}`}>
                  {/* –ú–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ */}
                  <CircleMarker
                    center={[startCoord[1], startCoord[0]]}
                    radius={4}
                    color={index % 2 === 0 ? "#2196F3" : "#4CAF50"}
                    fillColor={index % 2 === 0 ? "#2196F3" : "#4CAF50"}
                    fillOpacity={0.8}
                  >
                    <Popup>
                      <strong>üöÄ –ù–∞—á–∞–ª–æ —Å–µ–≥–º–µ–Ω—Ç–∞ {index + 1}</strong>
                      <br />
                      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {startCoord[1].toFixed(4)}, {startCoord[0].toFixed(4)}
                    </Popup>
                  </CircleMarker>

                  {/* –ú–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ */}
                  <CircleMarker
                    center={[endCoord[1], endCoord[0]]}
                    radius={4}
                    color={index % 2 === 0 ? "#1976D2" : "#388E3C"}
                    fillColor={index % 2 === 0 ? "#1976D2" : "#388E3C"}
                    fillOpacity={0.8}
                  >
                    <Popup>
                      <strong>üèÅ –ö–æ–Ω–µ—Ü —Å–µ–≥–º–µ–Ω—Ç–∞ {index + 1}</strong>
                      <br />
                      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {endCoord[1].toFixed(4)}, {endCoord[0].toFixed(4)}
                    </Popup>
                  </CircleMarker>
                </React.Fragment>
              )
            })}

            {/* –ú–∞—Ä–∫–µ—Ä –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ */}
            <Marker position={route.to} icon={endIcon}>
              <Popup>
                <strong>üèÅ –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞</strong>
                <br />
                üìè –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {(route.distance / 1000).toFixed(1)} –∫–º
                <br />
                ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {Math.round(route.duration / 60)} –º–∏–Ω ({route.duration}—Å)
                <br />
                üö∂ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {((route.distance / 1000) / (route.duration / 3600)).toFixed(1)} –∫–º/—á
                <br />
                üó∫Ô∏è –°–µ–≥–º–µ–Ω—Ç–æ–≤: {route.segments ? route.segments.length : 1}
              </Popup>
            </Marker>

            {/* –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É–±—Ä–∞–Ω–∞ —Å –∫–∞—Ä—Ç—ã - —Ç–µ–ø–µ—Ä—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞ */}
          </>
        )}

        {/* –°—Ç—Ä–µ–ª–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ */}
        {/* TODO: –î–æ–±–∞–≤–∏—Ç—å DirectionArrows –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}

        {/* –ö–æ–º–ø–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ */}
        {/* TODO: –î–æ–±–∞–≤–∏—Ç—å UserCompass –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
      </MapContainer>

      {/* –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–µ–ª–∫–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞ */}
      {className?.includes('fullscreen') && arrowPosition && (
        <div className="fixed-navigation-arrow">
          <div className="navigation-arrow-triangle"></div>
        </div>
      )}

      {/* –ü–∞–Ω–µ–ª—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ */}
      {className?.includes('fullscreen') && route?.coordinates && (
        <NextTurnPanel route={route} arrowPosition={arrowPosition} />
      )}

      {/* –ü–∞–Ω–µ–ª—å –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏ */}
      {className?.includes('fullscreen') && route?.coordinates && (
        <RemainingInfoPanel route={route} arrowPosition={arrowPosition} />
      )}
    </div>
  )
}

export default MapComponent
