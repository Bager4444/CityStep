import { useState, useEffect } from 'react'
import './PriorityConfigPanel.css'

/**
 * üéõÔ∏è –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–æ—Ä–æ–≥
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä—ã –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
const PriorityConfigPanel = ({
  priorityService,
  onConfigChange,
  isVisible,
  onClose
}) => {
  const [config, setConfig] = useState(null)
  const [activeTab, setActiveTab] = useState('factors')
  const [presets, setPresets] = useState([])

  useEffect(() => {
    if (priorityService && isVisible) {
      setConfig(priorityService.userConfig)
      initializePresets()
    }
  }, [priorityService, isVisible])

  const initializePresets = () => {
    setPresets([
      {
        id: 'balanced',
        name: '‚öñÔ∏è –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
        description: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤',
        factors: { safety: 0.35, comfort: 0.25, ecology: 0.2, traffic: 0.15, speed: 0.05 }
      },
      {
        id: 'safety',
        name: 'üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
        description: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - —Ç—Ä–æ—Ç—É–∞—Ä—ã –∏ –ø–µ—à–µ—Ö–æ–¥–Ω—ã–µ –∑–æ–Ω—ã',
        factors: { safety: 0.5, comfort: 0.25, ecology: 0.15, traffic: 0.05, speed: 0.05 }
      },
      {
        id: 'comfort',
        name: 'üòå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç',
        description: '–£–¥–æ–±–Ω—ã–µ –ø–µ—à–µ—Ö–æ–¥–Ω—ã–µ –¥–æ—Ä–æ–∂–∫–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ',
        factors: { comfort: 0.45, safety: 0.3, ecology: 0.15, traffic: 0.05, speed: 0.05 }
      },
      {
        id: 'eco',
        name: 'üå± –ß–µ—Ä–µ–∑ –ø–∞—Ä–∫–∏',
        description: '–ú–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –ø–∞—Ä–∫–∏ –∏ –∑–µ–ª–µ–Ω—ã–µ –∑–æ–Ω—ã',
        factors: { ecology: 0.4, comfort: 0.3, safety: 0.25, traffic: 0.03, speed: 0.02 }
      },
      {
        id: 'quiet',
        name: 'üîá –¢–∏—Ö–∏–π –º–∞—Ä—à—Ä—É—Ç',
        description: '–ò–∑–±–µ–≥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏ —à—É–º–∞',
        factors: { traffic: 0.4, safety: 0.3, comfort: 0.2, ecology: 0.08, speed: 0.02 }
      },
      {
        id: 'shortest',
        name: 'üìè –ö—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å',
        description: '–°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ä—à—Ä—É—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º)',
        factors: { speed: 0.3, safety: 0.25, comfort: 0.2, ecology: 0.15, traffic: 0.1 }
      }
    ])
  }

  const handleFactorChange = (factor, value) => {
    const newFactors = { ...config.factors, [factor]: value / 100 }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ 1.0
    const total = Object.values(newFactors).reduce((sum, val) => sum + val, 0)
    if (total > 0) {
      Object.keys(newFactors).forEach(key => {
        newFactors[key] = newFactors[key] / total
      })
    }

    const newConfig = { ...config, factors: newFactors }
    setConfig(newConfig)

    if (priorityService) {
      priorityService.updateUserConfig(newConfig)
    }

    if (onConfigChange) {
      onConfigChange(newConfig)
    }
  }

  const applyPreset = (preset) => {
    const newConfig = { ...config, factors: preset.factors }
    setConfig(newConfig)

    if (priorityService) {
      priorityService.updateUserConfig(newConfig)
    }

    if (onConfigChange) {
      onConfigChange(newConfig)
    }
  }

  const resetToDefaults = () => {
    if (priorityService) {
      priorityService.resetToDefaults()
      setConfig(priorityService.userConfig)

      if (onConfigChange) {
        onConfigChange(priorityService.userConfig)
      }
    }
  }

  if (!isVisible || !config) {
    return null
  }

  return (
    <div className="priority-config-overlay">
      <div className="priority-config-panel">
        <div className="config-header">
          <h2>üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞</h2>
          <button className="close-btn" onClick={onClose}>‚úï</button>
        </div>

        <div className="config-tabs">
          <button
            className={`tab ${activeTab === 'factors' ? 'active' : ''}`}
            onClick={() => setActiveTab('factors')}
          >
            üìä –§–∞–∫—Ç–æ—Ä—ã
          </button>
          <button
            className={`tab ${activeTab === 'presets' ? 'active' : ''}`}
            onClick={() => setActiveTab('presets')}
          >
            üéØ –ü—Ä–µ—Å–µ—Ç—ã
          </button>
          <button
            className={`tab ${activeTab === 'advanced' ? 'active' : ''}`}
            onClick={() => setActiveTab('advanced')}
          >
            ‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
          </button>
        </div>

        <div className="config-content">
          {activeTab === 'factors' && (
            <div className="factors-tab">
              <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤</h3>
              <p className="tab-description">
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—à–µ—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
                –ó–Ω–∞—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—Ç—Å—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
              </p>

              <div className="factors-list">
                {Object.entries(config.factors).map(([factor, value]) => (
                  <div key={factor} className="factor-control">
                    <div className="factor-info">
                      <span className="factor-icon">
                        {factor === 'speed' && '‚ö°'}
                        {factor === 'safety' && 'üõ°Ô∏è'}
                        {factor === 'traffic' && 'üö¶'}
                        {factor === 'ecology' && 'üå±'}
                        {factor === 'comfort' && 'üòå'}
                      </span>
                      <span className="factor-name">
                        {factor === 'speed' && '–°–∫–æ—Ä–æ—Å—Ç—å —Ö–æ–¥—å–±—ã'}
                        {factor === 'safety' && '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'}
                        {factor === 'traffic' && '–ò–∑–±–µ–≥–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞'}
                        {factor === 'ecology' && '–ü–∞—Ä–∫–∏ –∏ –∑–µ–ª–µ–Ω—å'}
                        {factor === 'comfort' && '–ö–æ–º—Ñ–æ—Ä—Ç —Ö–æ–¥—å–±—ã'}
                      </span>
                      <span className="factor-value">{Math.round(value * 100)}%</span>
                    </div>
                    <input
                      type="range"
                      min="0"
                      max="100"
                      value={Math.round(value * 100)}
                      onChange={(e) => handleFactorChange(factor, parseInt(e.target.value))}
                      className="factor-slider"
                    />
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'presets' && (
            <div className="presets-tab">
              <h3>–ì–æ—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
              <p className="tab-description">
                –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π.
              </p>

              <div className="presets-grid">
                {presets.map(preset => (
                  <div key={preset.id} className="preset-card">
                    <div className="preset-header">
                      <h4>{preset.name}</h4>
                      <p>{preset.description}</p>
                    </div>
                    <div className="preset-factors">
                      {Object.entries(preset.factors).map(([factor, value]) => (
                        <div key={factor} className="preset-factor">
                          <span className="factor-name">
                            {factor === 'speed' && '‚ö°'}
                            {factor === 'safety' && 'üõ°Ô∏è'}
                            {factor === 'traffic' && 'üö¶'}
                            {factor === 'ecology' && 'üå±'}
                            {factor === 'comfort' && 'üòå'}
                          </span>
                          <span className="factor-value">{Math.round(value * 100)}%</span>
                        </div>
                      ))}
                    </div>
                    <button
                      className="apply-preset-btn"
                      onClick={() => applyPreset(preset)}
                    >
                      –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'advanced' && (
            <div className="advanced-tab">
              <h3>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
              <p className="tab-description">
                –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏.
              </p>

              <div className="advanced-settings">
                <div className="setting-group">
                  <h4>üïê –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã</h4>
                  <div className="time-settings">
                    <label>
                      –£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:
                      <input type="checkbox" defaultChecked />
                    </label>
                    <label>
                      –£—á–∏—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:
                      <input type="checkbox" defaultChecked />
                    </label>
                  </div>
                </div>

                <div className="setting-group">
                  <h4>üå§Ô∏è –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è</h4>
                  <div className="weather-settings">
                    <label>
                      –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã:
                      <input type="checkbox" defaultChecked />
                    </label>
                    <select className="weather-select">
                      <option value="clear">‚òÄÔ∏è –Ø—Å–Ω–æ</option>
                      <option value="rain">üåßÔ∏è –î–æ–∂–¥—å</option>
                      <option value="snow">‚ùÑÔ∏è –°–Ω–µ–≥</option>
                      <option value="fog">üå´Ô∏è –¢—É–º–∞–Ω</option>
                    </select>
                  </div>
                </div>

                <div className="setting-group">
                  <h4>üö∂‚Äç‚ôÇÔ∏è –ü–µ—à–µ—Ö–æ–¥–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                  <div className="transport-settings">
                    <label>
                      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç—Ä–æ—Ç—É–∞—Ä–æ–≤:
                      <input type="checkbox" defaultChecked />
                    </label>
                    <label>
                      –ò–∑–±–µ–≥–∞—Ç—å –∞–≤—Ç–æ–¥–æ—Ä–æ–≥:
                      <input type="checkbox" defaultChecked />
                    </label>
                    <label>
                      –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –ø–∞—Ä–∫–∏:
                      <input type="checkbox" />
                    </label>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        <div className="config-actions">
          <button className="reset-btn" onClick={resetToDefaults}>
            üîÑ –°–±—Ä–æ—Å–∏—Ç—å
          </button>
          <button className="apply-btn" onClick={onClose}>
            ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å
          </button>
        </div>
      </div>
    </div>
  )
}

export default PriorityConfigPanel
