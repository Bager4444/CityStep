/**
 * üìè –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π, –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
 */

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö
 * @param {number} distanceInMeters - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
 */
export const formatDistance = (distanceInMeters) => {
  if (!distanceInMeters || distanceInMeters === 0) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

  if (distanceInMeters < 1000) {
    return `${Math.round(distanceInMeters)} –º`
  } else {
    const km = distanceInMeters / 1000
    if (km < 10) {
      return `${km.toFixed(1)} –∫–º`
    } else {
      return `${Math.round(km)} –∫–º`
    }
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {number} durationInSeconds - –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
export const formatDuration = (durationInSeconds) => {
  if (!durationInSeconds || durationInSeconds === 0) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

  const minutes = Math.round(durationInSeconds / 60)

  if (minutes < 60) {
    return `${minutes} –º–∏–Ω`
  } else {
    const hours = Math.floor(minutes / 60)
    const remainingMinutes = minutes % 60

    if (remainingMinutes === 0) {
      return `${hours} —á`
    } else {
      return `${hours} —á ${remainingMinutes} –º–∏–Ω`
    }
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
 * @param {number} distanceInMeters - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
 * @param {number} durationInSeconds - –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string|null} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏–ª–∏ null
 */
export const formatSpeed = (distanceInMeters, durationInSeconds) => {
  if (!distanceInMeters || !durationInSeconds || durationInSeconds === 0) return null

  const speedKmh = (distanceInMeters / 1000) / (durationInSeconds / 3600)

  // –î–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (2-8 –∫–º/—á)
  if (speedKmh > 10) {
    console.warn(`‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${speedKmh.toFixed(1)} –∫–º/—á`)
    console.warn(`üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distanceInMeters}–º, –í—Ä–µ–º—è: ${durationInSeconds}—Å`)

    // –í–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ –º–∏–Ω—É—Ç–∞—Ö, –∞ –Ω–µ —Å–µ–∫—É–Ω–¥–∞—Ö
    const speedIfMinutes = (distanceInMeters / 1000) / ((durationInSeconds * 60) / 3600)
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:`)
    console.log(`   - –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö: ${speedIfMinutes.toFixed(1)} –∫–º/—á`)
    console.log(`   - –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º: ${((distanceInMeters * 1000) / 1000) / (durationInSeconds / 3600)} –∫–º/—á`)

    if (speedIfMinutes >= 2 && speedIfMinutes <= 8) {
      console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: –≤—Ä–µ–º—è –±—ã–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö, —Å–∫–æ—Ä–æ—Å—Ç—å: ${speedIfMinutes.toFixed(1)} –∫–º/—á`)
      return `${speedIfMinutes.toFixed(1)} –∫–º/—á`
    }

    // –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    const reasonableSpeed = Math.min(speedKmh, 6) // –ú–∞–∫—Å–∏–º—É–º 6 –∫–º/—á –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–∞
    console.log(`üîß –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏: ${reasonableSpeed.toFixed(1)} –∫–º/—á`)
    return `${reasonableSpeed.toFixed(1)} –∫–º/—á`
  }

  return `${speedKmh.toFixed(1)} –∫–º/—á`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {number} durationInSeconds - –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
export const formatDurationDetailed = (durationInSeconds) => {
  if (!durationInSeconds || durationInSeconds === 0) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

  const totalMinutes = Math.round(durationInSeconds / 60)
  const hours = Math.floor(totalMinutes / 60)
  const minutes = totalMinutes % 60

  if (hours === 0) {
    return `${minutes} –º–∏–Ω—É—Ç`
  } else if (minutes === 0) {
    return `${hours} ${getHourWord(hours)}`
  } else {
    return `${hours} ${getHourWord(hours)} ${minutes} ${getMinuteWord(minutes)}`
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "—á–∞—Å"
 * @param {number} hours - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
 * @returns {string} –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "—á–∞—Å"
 */
const getHourWord = (hours) => {
  if (hours % 10 === 1 && hours % 100 !== 11) {
    return '—á–∞—Å'
  } else if ([2, 3, 4].includes(hours % 10) && ![12, 13, 14].includes(hours % 100)) {
    return '—á–∞—Å–∞'
  } else {
    return '—á–∞—Å–æ–≤'
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞ "–º–∏–Ω—É—Ç–∞"
 * @param {number} minutes - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
 * @returns {string} –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–º–∏–Ω—É—Ç–∞"
 */
const getMinuteWord = (minutes) => {
  if (minutes % 10 === 1 && minutes % 100 !== 11) {
    return '–º–∏–Ω—É—Ç–∞'
  } else if ([2, 3, 4].includes(minutes % 10) && ![12, 13, 14].includes(minutes % 100)) {
    return '–º–∏–Ω—É—Ç—ã'
  } else {
    return '–º–∏–Ω—É—Ç'
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
 * @param {number} distanceInMeters - –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
 */
export const formatDistanceDetailed = (distanceInMeters) => {
  if (!distanceInMeters || distanceInMeters === 0) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

  if (distanceInMeters < 100) {
    return `${Math.round(distanceInMeters)} –º–µ—Ç—Ä–æ–≤`
  } else if (distanceInMeters < 1000) {
    return `${Math.round(distanceInMeters)} –º`
  } else {
    const km = distanceInMeters / 1000
    const meters = distanceInMeters % 1000

    if (km < 1) {
      return `${Math.round(distanceInMeters)} –º`
    } else if (km < 10 && meters > 100) {
      return `${km.toFixed(1)} –∫–º`
    } else if (km < 100) {
      return `${km.toFixed(1)} –∫–º`
    } else {
      return `${Math.round(km)} –∫–º`
    }
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 * @param {number} lat - –®–∏—Ä–æ—Ç–∞
 * @param {number} lon - –î–æ–ª–≥–æ—Ç–∞
 * @param {number} precision - –¢–æ—á–Ω–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
 */
export const formatCoordinates = (lat, lon, precision = 4) => {
  if (typeof lat !== 'number' || typeof lon !== 'number') return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

  return `${lat.toFixed(precision)}, ${lon.toFixed(precision)}`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è
 * @param {number} durationInSeconds - –í—Ä–µ–º—è –≤ –ø—É—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è
 */
export const formatArrivalTime = (durationInSeconds) => {
  if (!durationInSeconds || durationInSeconds === 0) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

  const now = new Date()
  const arrivalTime = new Date(now.getTime() + durationInSeconds * 1000)

  const hours = arrivalTime.getHours().toString().padStart(2, '0')
  const minutes = arrivalTime.getMinutes().toString().padStart(2, '0')

  return `${hours}:${minutes}`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
 * @param {number} value - –ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
 * @param {number} precision - –¢–æ—á–Ω–æ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
 */
export const formatPercentage = (value, precision = 0) => {
  if (typeof value !== 'number' || value < 0 || value > 1) return '0%'

  return `${(value * 100).toFixed(precision)}%`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
 * @param {number} bytes - –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
 */
export const formatFileSize = (bytes) => {
  if (!bytes || bytes === 0) return '0 –ë'

  const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']
  const i = Math.floor(Math.log(bytes) / Math.log(1024))

  return `${(bytes / Math.pow(1024, i)).toFixed(1)} ${sizes[i]}`
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
 * @param {number} number - –ß–∏—Å–ª–æ
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
 */
export const formatNumber = (number) => {
  if (typeof number !== 'number') return '0'

  return number.toLocaleString('ru-RU')
}
