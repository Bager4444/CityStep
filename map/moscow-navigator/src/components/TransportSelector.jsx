import { useState } from 'react'
import './TransportSelector.css'

const TRANSPORT_MODES = {
  walking: {
    id: 'walking',
    name: '–ü–µ—à–∫–æ–º',
    icon: 'üö∂',
    color: '#28a745',
    description: '–ü–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç',
    osrmProfile: 'foot',
    avgSpeed: 3 // –∫–º/—á - –æ–±—ã—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ö–æ–¥—å–±—ã
  },
  cycling: {
    id: 'cycling',
    name: '–í–µ–ª–æ—Å–∏–ø–µ–¥',
    icon: 'üö¥',
    color: '#17a2b8',
    description: '–í–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç',
    osrmProfile: 'bicycle',
    avgSpeed: 18 // –∫–º/—á - —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ
  },
  driving: {
    id: 'driving',
    name: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å',
    icon: 'üöó',
    color: '#dc3545',
    description: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç',
    osrmProfile: 'driving',
    avgSpeed: 30 // –∫–º/—á - —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ —Å –ø—Ä–æ–±–∫–∞–º–∏
  },
  public_transport: {
    id: 'public_transport',
    name: '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    icon: 'üöå',
    color: '#6f42c1',
    description: '–ê–≤—Ç–æ–±—É—Å, –º–µ—Ç—Ä–æ, —Ç—Ä–∞–º–≤–∞–π',
    osrmProfile: 'driving', // –ò—Å–ø–æ–ª—å–∑—É–µ–º driving –∫–∞–∫ –±–∞–∑—É
    avgSpeed: 22 // –∫–º/—á - —Å —É—á–µ—Ç–æ–º –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∏ –ø–µ—Ä–µ—Å–∞–¥–æ–∫
  },
  taxi: {
    id: 'taxi',
    name: '–¢–∞–∫—Å–∏',
    icon: 'üöï',
    color: '#fd7e14',
    description: '–ú–∞—Ä—à—Ä—É—Ç –Ω–∞ —Ç–∞–∫—Å–∏',
    osrmProfile: 'driving',
    avgSpeed: 28 // –∫–º/—á - —á—É—Ç—å –±—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω–æ–≥–æ –∞–≤—Ç–æ
  }
}

function TransportSelector({ selectedMode = 'driving', onModeChange, disabled = false }) {
  const [isExpanded, setIsExpanded] = useState(false)

  const handleModeSelect = (mode) => {
    onModeChange(mode)
    setIsExpanded(false)
  }

  const selectedTransport = TRANSPORT_MODES[selectedMode]

  return (
    <div className="transport-selector">
      <div className="transport-header">
        <span className="transport-label">–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è:</span>
      </div>

      <div className={`transport-dropdown ${isExpanded ? 'expanded' : ''}`}>
        {/* –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º */}
        <button
          className={`transport-selected ${disabled ? 'disabled' : ''}`}
          onClick={() => !disabled && setIsExpanded(!isExpanded)}
          disabled={disabled}
          style={{ borderColor: selectedTransport.color }}
        >
          <div className="transport-option-content">
            <span className="transport-icon">{selectedTransport.icon}</span>
            <div className="transport-info">
              <span className="transport-name">{selectedTransport.name}</span>
              <span className="transport-desc">{selectedTransport.description}</span>
            </div>
          </div>
          <span className={`dropdown-arrow ${isExpanded ? 'up' : 'down'}`}>
            {isExpanded ? '‚ñ≤' : '‚ñº'}
          </span>
        </button>

        {/* –°–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π */}
        {isExpanded && (
          <div className="transport-options">
            {Object.values(TRANSPORT_MODES).map((mode) => (
              <button
                key={mode.id}
                className={`transport-option ${selectedMode === mode.id ? 'active' : ''}`}
                onClick={() => handleModeSelect(mode.id)}
                style={{
                  borderLeftColor: mode.color,
                  backgroundColor: selectedMode === mode.id ? `${mode.color}15` : 'transparent'
                }}
              >
                <div className="transport-option-content">
                  <span className="transport-icon">{mode.icon}</span>
                  <div className="transport-info">
                    <span className="transport-name">{mode.name}</span>
                    <span className="transport-desc">{mode.description}</span>
                  </div>
                  <div className="transport-speed">
                    ~{mode.avgSpeed} –∫–º/—á
                  </div>
                </div>
                {selectedMode === mode.id && (
                  <span className="selected-check">‚úì</span>
                )}
              </button>
            ))}
          </div>
        )}
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {selectedMode === 'public_transport' && (
        <div className="transport-note">
          <span className="note-icon">‚ÑπÔ∏è</span>
          <span className="note-text">
            –í–∫–ª—é—á–∞–µ—Ç –º–µ—Ç—Ä–æ, –∞–≤—Ç–æ–±—É—Å—ã, —Ç—Ä–∞–º–≤–∞–∏ –∏ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å—ã
          </span>
        </div>
      )}

      {selectedMode === 'walking' && (
        <div className="transport-note">
          <span className="note-icon">üëü</span>
          <span className="note-text">
            –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—à–µ—Ö–æ–¥–æ–≤
          </span>
        </div>
      )}

      {selectedMode === 'cycling' && (
        <div className="transport-note">
          <span className="note-icon">üõ£Ô∏è</span>
          <span className="note-text">
            –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ–ª–æ–¥–æ—Ä–æ–∂–∫–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
          </span>
        </div>
      )}
    </div>
  )
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
export const getTransportConfig = (mode) => {
  return TRANSPORT_MODES[mode] || TRANSPORT_MODES.driving
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏
export const calculateEstimatedTime = (distanceKm, transportMode) => {
  const config = getTransportConfig(transportMode)
  const timeHours = distanceKm / config.avgSpeed
  const timeMinutes = Math.round(timeHours * 60)

  return {
    hours: Math.floor(timeMinutes / 60),
    minutes: timeMinutes % 60,
    totalMinutes: timeMinutes
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
export const formatTime = (timeObj) => {
  if (timeObj.hours > 0) {
    return `${timeObj.hours}—á ${timeObj.minutes}–º–∏–Ω`
  }
  return `${timeObj.minutes}–º–∏–Ω`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–∞–∫—Å–∏ –≤ –ú–æ—Å–∫–≤–µ
export const calculateTaxiPrice = (distanceKm, timeMinutes) => {
  // –¢–∞—Ä–∏—Ñ—ã —Ç–∞–∫—Å–∏ –≤ –ú–æ—Å–∫–≤–µ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
  const TAXI_RATES = {
    baseFare: 150,        // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–∞–¥–∫–∏
    perKm: 25,           // –†—É–±–ª–µ–π –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä
    perMinute: 8,        // –†—É–±–ª–µ–π –∑–∞ –º–∏–Ω—É—Ç—É (–≤ –ø—Ä–æ–±–∫–∞—Ö)
    minPrice: 200,       // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏
    nightMultiplier: 1.2, // –ù–æ—á–Ω–æ–π —Ç–∞—Ä–∏—Ñ (23:00-06:00)
    peakMultiplier: 1.3   // –ß–∞—Å –ø–∏–∫ (07:00-10:00, 17:00-20:00)
  }

  // –ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
  let price = TAXI_RATES.baseFare +
              (distanceKm * TAXI_RATES.perKm) +
              (timeMinutes * TAXI_RATES.perMinute)

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
  price = Math.max(price, TAXI_RATES.minPrice)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
  const currentHour = new Date().getHours()

  // –ù–æ—á–Ω–æ–π —Ç–∞—Ä–∏—Ñ (23:00-06:00)
  if (currentHour >= 23 || currentHour < 6) {
    price *= TAXI_RATES.nightMultiplier
  }
  // –ß–∞—Å –ø–∏–∫ (07:00-10:00, 17:00-20:00)
  else if ((currentHour >= 7 && currentHour < 10) || (currentHour >= 17 && currentHour < 20)) {
    price *= TAXI_RATES.peakMultiplier
  }

  return {
    basePrice: Math.round(price),
    minPrice: Math.round(price * 0.8),  // -20% (—ç–∫–æ–Ω–æ–º —Ç–∞—Ä–∏—Ñ)
    maxPrice: Math.round(price * 1.5),  // +50% (–∫–æ–º—Ñ–æ—Ä—Ç/–±–∏–∑–Ω–µ—Å)
    currency: '‚ÇΩ'
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Ç–∞–∫—Å–∏
export const formatTaxiPrice = (priceObj) => {
  if (priceObj.minPrice === priceObj.maxPrice) {
    return `${priceObj.basePrice}${priceObj.currency}`
  }
  return `${priceObj.minPrice}-${priceObj.maxPrice}${priceObj.currency}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
export const getTaxiTariffInfo = () => {
  const currentHour = new Date().getHours()

  if (currentHour >= 23 || currentHour < 6) {
    return { type: 'night', description: '–ù–æ—á–Ω–æ–π —Ç–∞—Ä–∏—Ñ (+20%)', icon: 'üåô' }
  } else if ((currentHour >= 7 && currentHour < 10) || (currentHour >= 17 && currentHour < 20)) {
    return { type: 'peak', description: '–ß–∞—Å –ø–∏–∫ (+30%)', icon: 'üö¶' }
  } else {
    return { type: 'normal', description: '–û–±—ã—á–Ω—ã–π —Ç–∞—Ä–∏—Ñ', icon: 'üïê' }
  }
}

export default TransportSelector
