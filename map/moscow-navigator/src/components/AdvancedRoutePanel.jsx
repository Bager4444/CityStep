import { useState, useEffect } from 'react'
import './AdvancedRoutePanel.css'

const AdvancedRoutePanel = ({
  routeFrom,
  setRouteFrom,
  routeTo,
  setRouteTo,
  onRouteSearch,
  route,
  userLocation
}) => {
  const [stops, setStops] = useState([])
  const [newStop, setNewStop] = useState('')
  const [departureTime, setDepartureTime] = useState('')
  const [isSearching, setIsSearching] = useState(false)
  const [error, setError] = useState('')

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏
  const formatDistance = (meters) => {
    if (!meters || isNaN(meters)) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    if (meters >= 1000) {
      return `${(meters / 1000).toFixed(1)} –∫–º`
    }
    return `${Math.round(meters)} –º`
  }

  const formatDuration = (seconds) => {
    if (!seconds || isNaN(seconds)) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

    const minutes = Math.round(seconds / 60)

    if (minutes >= 60) {
      const hours = Math.floor(minutes / 60)
      const remainingMinutes = minutes % 60
      return `${hours}—á ${remainingMinutes}–º–∏–Ω`
    }
    return `${minutes} –º–∏–Ω`
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 10 –º–∏–Ω—É—Ç)
  useEffect(() => {
    const now = new Date()
    now.setMinutes(now.getMinutes() + 10)
    const timeString = now.toTimeString().slice(0, 5)
    setDepartureTime(timeString)
  }, [])

  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const placeCategories = [
    { name: '–ö–∞—Ñ–µ', icon: '‚òï', query: '–∫–∞—Ñ–µ' },
    { name: '–†–µ—Å—Ç–æ—Ä–∞–Ω', icon: 'üçΩÔ∏è', query: '—Ä–µ—Å—Ç–æ—Ä–∞–Ω' },
    { name: '–ú–∞–≥–∞–∑–∏–Ω', icon: 'üõí', query: '–º–∞–≥–∞–∑–∏–Ω' },
    { name: '–ê–ø—Ç–µ–∫–∞', icon: 'üíä', query: '–∞–ø—Ç–µ–∫–∞' },
    { name: '–ë–∞–Ω–∫', icon: 'üè¶', query: '–±–∞–Ω–∫' },
    { name: '–ê–ó–°', icon: '‚õΩ', query: '–∑–∞–ø—Ä–∞–≤–∫–∞' },
    { name: '–ü–∞—Ä–∫', icon: 'üå≥', query: '–ø–∞—Ä–∫' },
    { name: '–ú—É–∑–µ–π', icon: 'üèõÔ∏è', query: '–º—É–∑–µ–π' }
  ]

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  const handleAddStop = () => {
    if (newStop.trim()) {
      const stop = {
        id: Date.now(),
        address: newStop.trim(),
        type: 'custom'
      }
      setStops([...stops, stop])
      setNewStop('')
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleAddCategoryStop = (category) => {
    const stop = {
      id: Date.now(),
      address: `${category.query} —Ä—è–¥–æ–º —Å –º–∞—Ä—à—Ä—É—Ç–æ–º`,
      type: 'category',
      category: category.name,
      icon: category.icon,
      query: category.query
    }
    setStops([...stops, stop])
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  const handleRemoveStop = (stopId) => {
    setStops(stops.filter(stop => stop.id !== stopId))
  }

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  const moveStop = (index, direction) => {
    const newStops = [...stops]
    const newIndex = direction === 'up' ? index - 1 : index + 1

    if (newIndex >= 0 && newIndex < stops.length) {
      [newStops[index], newStops[newIndex]] = [newStops[newIndex], newStops[index]]
      setStops(newStops)
    }
  }

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  const useCurrentLocation = () => {
    if (userLocation) {
      setRouteFrom(`${userLocation.lat.toFixed(6)}, ${userLocation.lon.toFixed(6)}`)
    } else {
      setError('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
  const handleRouteSearch = async () => {
    if (!routeFrom.trim() || !routeTo.trim()) {
      setError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è "–û—Ç–∫—É–¥–∞" –∏ "–ö—É–¥–∞"')
      return
    }

    setIsSearching(true)
    setError('')

    try {
      // –ü–µ—Ä–µ–¥–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
      await onRouteSearch('walking', stops, departureTime)
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞')
    } finally {
      setIsSearching(false)
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
  const handleClearRoute = () => {
    setRouteFrom('')
    setRouteTo('')
    setStops([])
    setError('')
  }

  return (
    <div className="advanced-route-panel">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="route-header">
        <h2>üö∂‚Äç‚ôÇÔ∏è –ü–µ—à–µ—Ö–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç</h2>
        <p>–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏</p>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ */}
      <div className="route-points">
        <div className="route-point">
          <label>üìç –û—Ç–∫—É–¥–∞:</label>
          <div className="input-with-button">
            <input
              type="text"
              value={routeFrom}
              onChange={(e) => setRouteFrom(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
              className="route-input"
            />
            <button
              onClick={useCurrentLocation}
              className="location-btn"
              title="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
            >
              üìç
            </button>
          </div>
        </div>

        <div className="route-point">
          <label>üéØ –ö—É–¥–∞:</label>
          <input
            type="text"
            value={routeTo}
            onChange={(e) => setRouteTo(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
            className="route-input"
          />
        </div>

        <div className="route-point">
          <label>‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</label>
          <input
            type="time"
            value={departureTime}
            onChange={(e) => setDepartureTime(e.target.value)}
            className="time-input"
          />
        </div>
      </div>

      {/* –û—Å—Ç–∞–Ω–æ–≤–∫–∏ */}
      <div className="stops-section">
        <h3>üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ –ø—É—Ç–∏</h3>

        {/* –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ */}
        {stops.length > 0 && (
          <div className="stops-list">
            {stops.map((stop, index) => (
              <div key={stop.id} className="stop-item">
                <div className="stop-info">
                  <span className="stop-icon">
                    {stop.icon || 'üìç'}
                  </span>
                  <span className="stop-address">{stop.address}</span>
                  {stop.category && (
                    <span className="stop-category">{stop.category}</span>
                  )}
                </div>
                <div className="stop-controls">
                  <button
                    onClick={() => moveStop(index, 'up')}
                    disabled={index === 0}
                    className="move-btn"
                    title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
                  >
                    ‚Üë
                  </button>
                  <button
                    onClick={() => moveStop(index, 'down')}
                    disabled={index === stops.length - 1}
                    className="move-btn"
                    title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑"
                  >
                    ‚Üì
                  </button>
                  <button
                    onClick={() => handleRemoveStop(stop.id)}
                    className="remove-btn"
                    title="–£–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É"
                  >
                    ‚úï
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ */}
        <div className="add-stop">
          <div className="custom-stop">
            <input
              type="text"
              value={newStop}
              onChange={(e) => setNewStop(e.target.value)}
              placeholder="–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
              className="stop-input"
              onKeyPress={(e) => e.key === 'Enter' && handleAddStop()}
            />
            <button onClick={handleAddStop} className="add-btn">
              ‚ûï
            </button>
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <div className="category-stops">
            <p>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</p>
            <div className="category-grid">
              {placeCategories.map((category) => (
                <button
                  key={category.name}
                  onClick={() => handleAddCategoryStop(category)}
                  className="category-btn"
                  title={`–î–æ–±–∞–≤–∏—Ç—å ${category.name.toLowerCase()}`}
                >
                  <span className="category-icon">{category.icon}</span>
                  <span className="category-name">{category.name}</span>
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <div className="error-message">
          {error}
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="route-actions">
        <button
          onClick={handleRouteSearch}
          disabled={isSearching || !routeFrom.trim() || !routeTo.trim()}
          className="route-btn primary"
        >
          {isSearching ? 'üîÑ –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç...' : 'üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç'}
        </button>

        <button
          onClick={handleClearRoute}
          className="route-btn secondary"
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
        </button>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ */}
      {route && (
        <div className="route-info">
          <h3>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ</h3>
          <div className="route-stats">
            <div className="stat">
              <span className="stat-label">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</span>
              <span className="stat-value">{formatDistance(route.distance)}</span>
            </div>
            <div className="stat">
              <span className="stat-label">–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</span>
              <span className="stat-value">{formatDuration(route.duration)}</span>
            </div>
            <div className="stat">
              <span className="stat-label">–û—Å—Ç–∞–Ω–æ–≤–æ–∫:</span>
              <span className="stat-value">{stops.length}</span>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default AdvancedRoutePanel
